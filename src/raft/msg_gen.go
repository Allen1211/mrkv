package raft

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/Allen1211/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *InstallSnapshotMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "LastIncludedIdx":
			z.LastIncludedIdx, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedIdx")
				return
			}
		case "LastIncludedTerm":
			z.LastIncludedTerm, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedTerm")
				return
			}
		case "LastIncludedEndLSN":
			z.LastIncludedEndLSN, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedEndLSN")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *InstallSnapshotMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Data"
	err = en.Append(0x84, 0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "LastIncludedIdx"
	err = en.Append(0xaf, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x64, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LastIncludedIdx)
	if err != nil {
		err = msgp.WrapError(err, "LastIncludedIdx")
		return
	}
	// write "LastIncludedTerm"
	err = en.Append(0xb0, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LastIncludedTerm)
	if err != nil {
		err = msgp.WrapError(err, "LastIncludedTerm")
		return
	}
	// write "LastIncludedEndLSN"
	err = en.Append(0xb2, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x4c, 0x53, 0x4e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.LastIncludedEndLSN)
	if err != nil {
		err = msgp.WrapError(err, "LastIncludedEndLSN")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *InstallSnapshotMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Data"
	o = append(o, 0x84, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	// string "LastIncludedIdx"
	o = append(o, 0xaf, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x64, 0x78)
	o = msgp.AppendInt(o, z.LastIncludedIdx)
	// string "LastIncludedTerm"
	o = append(o, 0xb0, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.LastIncludedTerm)
	// string "LastIncludedEndLSN"
	o = append(o, 0xb2, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x4c, 0x53, 0x4e)
	o = msgp.AppendUint64(o, z.LastIncludedEndLSN)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InstallSnapshotMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "LastIncludedIdx":
			z.LastIncludedIdx, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedIdx")
				return
			}
		case "LastIncludedTerm":
			z.LastIncludedTerm, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedTerm")
				return
			}
		case "LastIncludedEndLSN":
			z.LastIncludedEndLSN, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedEndLSN")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *InstallSnapshotMsg) Msgsize() (s int) {
	s = 1 + 5 + msgp.BytesPrefixSize + len(z.Data) + 16 + msgp.IntSize + 17 + msgp.IntSize + 19 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LogEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Command":
			z.Command, err = dc.ReadBytes(z.Command)
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "Index":
			z.Index, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LogEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Command"
	err = en.Append(0x83, 0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Command)
	if err != nil {
		err = msgp.WrapError(err, "Command")
		return
	}
	// write "Term"
	err = en.Append(0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "Index"
	err = en.Append(0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LogEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Command"
	o = append(o, 0x83, 0xa7, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64)
	o = msgp.AppendBytes(o, z.Command)
	// string "Term"
	o = append(o, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	// string "Index"
	o = append(o, 0xa5, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.Index)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LogEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Command":
			z.Command, bts, err = msgp.ReadBytesBytes(bts, z.Command)
			if err != nil {
				err = msgp.WrapError(err, "Command")
				return
			}
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "Index":
			z.Index, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LogEntry) Msgsize() (s int) {
	s = 1 + 8 + msgp.BytesPrefixSize + len(z.Command) + 5 + msgp.IntSize + 6 + msgp.IntSize
	return
}
