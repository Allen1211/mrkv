package common

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/Allen1211/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BaseArgsN) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cid":
			z.Cid, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Gid":
			z.Gid, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BaseArgsN) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Cid"
	err = en.Append(0x84, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Cid)
	if err != nil {
		err = msgp.WrapError(err, "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Seq)
	if err != nil {
		err = msgp.WrapError(err, "Seq")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	// write "Gid"
	err = en.Append(0xa3, 0x47, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Gid)
	if err != nil {
		err = msgp.WrapError(err, "Gid")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BaseArgsN) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Cid"
	o = append(o, 0x84, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.Seq)
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	// string "Gid"
	o = append(o, 0xa3, 0x47, 0x69, 0x64)
	o = msgp.AppendInt(o, z.Gid)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BaseArgsN) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cid":
			z.Cid, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Gid":
			z.Gid, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BaseArgsN) Msgsize() (s int) {
	s = 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 8 + msgp.IntSize + 4 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CmdType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = CmdType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CmdType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CmdType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CmdType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = CmdType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CmdType) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DeleteArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			err = z.BaseArgsN.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DeleteArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "BaseArgsN"
	err = en.Append(0x82, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	if err != nil {
		return
	}
	err = z.BaseArgsN.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// write "Key"
	err = en.Append(0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DeleteArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "BaseArgsN"
	o = append(o, 0x82, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	o, err = z.BaseArgsN.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// string "Key"
	o = append(o, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeleteArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			bts, err = z.BaseArgsN.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DeleteArgs) Msgsize() (s int) {
	s = 1 + 10 + z.BaseArgsN.Msgsize() + 4 + msgp.StringPrefixSize + len(z.Key)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DeleteReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FromReply":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "FromReply")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "FromReply")
					return
				}
				switch msgp.UnsafeString(field) {
				case "NodeId":
					z.FromReply.NodeId, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "NodeId")
						return
					}
				case "GID":
					z.FromReply.GID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "GID")
						return
					}
				case "Peer":
					z.FromReply.Peer, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "Peer")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "FromReply")
						return
					}
				}
			}
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DeleteReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "FromReply"
	err = en.Append(0x82, 0xa9, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79)
	if err != nil {
		return
	}
	// map header, size 3
	// write "NodeId"
	err = en.Append(0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "NodeId")
		return
	}
	// write "GID"
	err = en.Append(0xa3, 0x47, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.GID)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "GID")
		return
	}
	// write "Peer"
	err = en.Append(0xa4, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.Peer)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "Peer")
		return
	}
	// write "Err"
	err = en.Append(0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DeleteReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "FromReply"
	o = append(o, 0x82, 0xa9, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79)
	// map header, size 3
	// string "NodeId"
	o = append(o, 0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.FromReply.NodeId)
	// string "GID"
	o = append(o, 0xa3, 0x47, 0x49, 0x44)
	o = msgp.AppendInt(o, z.FromReply.GID)
	// string "Peer"
	o = append(o, 0xa4, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.FromReply.Peer)
	// string "Err"
	o = append(o, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DeleteReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FromReply":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FromReply")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "FromReply")
					return
				}
				switch msgp.UnsafeString(field) {
				case "NodeId":
					z.FromReply.NodeId, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "NodeId")
						return
					}
				case "GID":
					z.FromReply.GID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "GID")
						return
					}
				case "Peer":
					z.FromReply.Peer, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "Peer")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply")
						return
					}
				}
			}
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DeleteReply) Msgsize() (s int) {
	s = 1 + 10 + 1 + 7 + msgp.IntSize + 4 + msgp.IntSize + 5 + msgp.IntSize + 4 + z.Err.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EraseShardArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			err = z.BaseArgsN.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Shards":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0002) {
				z.Shards = (z.Shards)[:zb0002]
			} else {
				z.Shards = make([]int, zb0002)
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EraseShardArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "BaseArgsN"
	err = en.Append(0x82, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	if err != nil {
		return
	}
	err = z.BaseArgsN.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001 := range z.Shards {
		err = en.WriteInt(z.Shards[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EraseShardArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "BaseArgsN"
	o = append(o, 0x82, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	o, err = z.BaseArgsN.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Shards)))
	for za0001 := range z.Shards {
		o = msgp.AppendInt(o, z.Shards[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EraseShardArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			bts, err = z.BaseArgsN.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Shards":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0002) {
				z.Shards = (z.Shards)[:zb0002]
			} else {
				z.Shards = make([]int, zb0002)
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EraseShardArgs) Msgsize() (s int) {
	s = 1 + 10 + z.BaseArgsN.Msgsize() + 7 + msgp.ArrayHeaderSize + (len(z.Shards) * (msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EraseShardReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EraseShardReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Err"
	err = en.Append(0x82, 0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EraseShardReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Err"
	o = append(o, 0x82, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EraseShardReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EraseShardReply) Msgsize() (s int) {
	s = 1 + 4 + z.Err.Msgsize() + 8 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FromReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NodeId":
			z.NodeId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "GID":
			z.GID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		case "Peer":
			z.Peer, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FromReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "NodeId"
	err = en.Append(0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "NodeId")
		return
	}
	// write "GID"
	err = en.Append(0xa3, 0x47, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.GID)
	if err != nil {
		err = msgp.WrapError(err, "GID")
		return
	}
	// write "Peer"
	err = en.Append(0xa4, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Peer)
	if err != nil {
		err = msgp.WrapError(err, "Peer")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FromReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "NodeId"
	o = append(o, 0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.NodeId)
	// string "GID"
	o = append(o, 0xa3, 0x47, 0x49, 0x44)
	o = msgp.AppendInt(o, z.GID)
	// string "Peer"
	o = append(o, 0xa4, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.Peer)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FromReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NodeId":
			z.NodeId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "GID":
			z.GID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		case "Peer":
			z.Peer, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FromReply) Msgsize() (s int) {
	s = 1 + 7 + msgp.IntSize + 4 + msgp.IntSize + 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			err = z.BaseArgsN.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GetArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "BaseArgsN"
	err = en.Append(0x82, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	if err != nil {
		return
	}
	err = z.BaseArgsN.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// write "Key"
	err = en.Append(0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GetArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "BaseArgsN"
	o = append(o, 0x82, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	o, err = z.BaseArgsN.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// string "Key"
	o = append(o, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			bts, err = z.BaseArgsN.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GetArgs) Msgsize() (s int) {
	s = 1 + 10 + z.BaseArgsN.Msgsize() + 4 + msgp.StringPrefixSize + len(z.Key)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GetReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FromReply":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "FromReply")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "FromReply")
					return
				}
				switch msgp.UnsafeString(field) {
				case "NodeId":
					z.FromReply.NodeId, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "NodeId")
						return
					}
				case "GID":
					z.FromReply.GID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "GID")
						return
					}
				case "Peer":
					z.FromReply.Peer, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "Peer")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "FromReply")
						return
					}
				}
			}
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "Value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GetReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "FromReply"
	err = en.Append(0x83, 0xa9, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79)
	if err != nil {
		return
	}
	// map header, size 3
	// write "NodeId"
	err = en.Append(0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "NodeId")
		return
	}
	// write "GID"
	err = en.Append(0xa3, 0x47, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.GID)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "GID")
		return
	}
	// write "Peer"
	err = en.Append(0xa4, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.Peer)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "Peer")
		return
	}
	// write "Err"
	err = en.Append(0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GetReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "FromReply"
	o = append(o, 0x83, 0xa9, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79)
	// map header, size 3
	// string "NodeId"
	o = append(o, 0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.FromReply.NodeId)
	// string "GID"
	o = append(o, 0xa3, 0x47, 0x49, 0x44)
	o = msgp.AppendInt(o, z.FromReply.GID)
	// string "Peer"
	o = append(o, 0xa4, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.FromReply.Peer)
	// string "Err"
	o = append(o, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GetReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FromReply":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FromReply")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "FromReply")
					return
				}
				switch msgp.UnsafeString(field) {
				case "NodeId":
					z.FromReply.NodeId, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "NodeId")
						return
					}
				case "GID":
					z.FromReply.GID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "GID")
						return
					}
				case "Peer":
					z.FromReply.Peer, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "Peer")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply")
						return
					}
				}
			}
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GetReply) Msgsize() (s int) {
	s = 1 + 10 + 1 + 7 + msgp.IntSize + 4 + msgp.IntSize + 5 + msgp.IntSize + 4 + z.Err.Msgsize() + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PullShardArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			err = z.BaseArgsN.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Shards":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0002) {
				z.Shards = (z.Shards)[:zb0002]
			} else {
				z.Shards = make([]int, zb0002)
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PullShardArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "BaseArgsN"
	err = en.Append(0x82, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	if err != nil {
		return
	}
	err = z.BaseArgsN.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001 := range z.Shards {
		err = en.WriteInt(z.Shards[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PullShardArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "BaseArgsN"
	o = append(o, 0x82, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	o, err = z.BaseArgsN.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Shards)))
	for za0001 := range z.Shards {
		o = msgp.AppendInt(o, z.Shards[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PullShardArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			bts, err = z.BaseArgsN.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Shards":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0002) {
				z.Shards = (z.Shards)[:zb0002]
			} else {
				z.Shards = make([]int, zb0002)
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PullShardArgs) Msgsize() (s int) {
	s = 1 + 10 + z.BaseArgsN.Msgsize() + 7 + msgp.ArrayHeaderSize + (len(z.Shards) * (msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PullShardReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Shards":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if z.Shards == nil {
				z.Shards = make(map[int][]byte, zb0002)
			} else if len(z.Shards) > 0 {
				for key := range z.Shards {
					delete(z.Shards, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 int
				var za0002 []byte
				za0001, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
				z.Shards[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PullShardReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Err"
	err = en.Append(0x83, 0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001, za0002 := range z.Shards {
		err = en.WriteInt(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Shards")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PullShardReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Err"
	o = append(o, 0x83, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Shards)))
	for za0001, za0002 := range z.Shards {
		o = msgp.AppendInt(o, za0001)
		o = msgp.AppendBytes(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PullShardReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Shards":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if z.Shards == nil {
				z.Shards = make(map[int][]byte, zb0002)
			} else if len(z.Shards) > 0 {
				for key := range z.Shards {
					delete(z.Shards, key)
				}
			}
			for zb0002 > 0 {
				var za0001 int
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
				z.Shards[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PullShardReply) Msgsize() (s int) {
	s = 1 + 4 + z.Err.Msgsize() + 8 + msgp.IntSize + 7 + msgp.MapHeaderSize
	if z.Shards != nil {
		for _, za0002 := range z.Shards {
			_ = za0002
			s += msgp.StringPrefixSize + msgp.IntSize + msgp.BytesPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PutAppendArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			err = z.BaseArgsN.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "Op":
			z.Op, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Op")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PutAppendArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "BaseArgsN"
	err = en.Append(0x84, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	if err != nil {
		return
	}
	err = z.BaseArgsN.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// write "Key"
	err = en.Append(0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	// write "Op"
	err = en.Append(0xa2, 0x4f, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Op)
	if err != nil {
		err = msgp.WrapError(err, "Op")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PutAppendArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "BaseArgsN"
	o = append(o, 0x84, 0xa9, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4e)
	o, err = z.BaseArgsN.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgsN")
		return
	}
	// string "Key"
	o = append(o, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Value)
	// string "Op"
	o = append(o, 0xa2, 0x4f, 0x70)
	o = msgp.AppendString(o, z.Op)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PutAppendArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgsN":
			bts, err = z.BaseArgsN.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgsN")
				return
			}
		case "Key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "Op":
			z.Op, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Op")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PutAppendArgs) Msgsize() (s int) {
	s = 1 + 10 + z.BaseArgsN.Msgsize() + 4 + msgp.StringPrefixSize + len(z.Key) + 6 + msgp.BytesPrefixSize + len(z.Value) + 3 + msgp.StringPrefixSize + len(z.Op)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PutAppendReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FromReply":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "FromReply")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "FromReply")
					return
				}
				switch msgp.UnsafeString(field) {
				case "NodeId":
					z.FromReply.NodeId, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "NodeId")
						return
					}
				case "GID":
					z.FromReply.GID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "GID")
						return
					}
				case "Peer":
					z.FromReply.Peer, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "Peer")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "FromReply")
						return
					}
				}
			}
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PutAppendReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "FromReply"
	err = en.Append(0x82, 0xa9, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79)
	if err != nil {
		return
	}
	// map header, size 3
	// write "NodeId"
	err = en.Append(0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "NodeId")
		return
	}
	// write "GID"
	err = en.Append(0xa3, 0x47, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.GID)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "GID")
		return
	}
	// write "Peer"
	err = en.Append(0xa4, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FromReply.Peer)
	if err != nil {
		err = msgp.WrapError(err, "FromReply", "Peer")
		return
	}
	// write "Err"
	err = en.Append(0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PutAppendReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "FromReply"
	o = append(o, 0x82, 0xa9, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79)
	// map header, size 3
	// string "NodeId"
	o = append(o, 0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.FromReply.NodeId)
	// string "GID"
	o = append(o, 0xa3, 0x47, 0x49, 0x44)
	o = msgp.AppendInt(o, z.FromReply.GID)
	// string "Peer"
	o = append(o, 0xa4, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.FromReply.Peer)
	// string "Err"
	o = append(o, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PutAppendReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FromReply":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FromReply")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "FromReply")
					return
				}
				switch msgp.UnsafeString(field) {
				case "NodeId":
					z.FromReply.NodeId, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "NodeId")
						return
					}
				case "GID":
					z.FromReply.GID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "GID")
						return
					}
				case "Peer":
					z.FromReply.Peer, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply", "Peer")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "FromReply")
						return
					}
				}
			}
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PutAppendReply) Msgsize() (s int) {
	s = 1 + 10 + 1 + 7 + msgp.IntSize + 4 + msgp.IntSize + 5 + msgp.IntSize + 4 + z.Err.Msgsize()
	return
}
