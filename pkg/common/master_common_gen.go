package common

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/Allen1211/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BaseArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cid":
			z.Cid, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z BaseArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Cid)
	if err != nil {
		err = msgp.WrapError(err, "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Seq)
	if err != nil {
		err = msgp.WrapError(err, "Seq")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BaseArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.Seq)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BaseArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cid":
			z.Cid, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BaseArgs) Msgsize() (s int) {
	s = 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConfigNodeGroup) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NodeId":
			z.NodeId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "RaftPeer":
			z.RaftPeer, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RaftPeer")
				return
			}
		case "Addr":
			z.Addr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ConfigNodeGroup) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "NodeId"
	err = en.Append(0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "NodeId")
		return
	}
	// write "RaftPeer"
	err = en.Append(0xa8, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RaftPeer)
	if err != nil {
		err = msgp.WrapError(err, "RaftPeer")
		return
	}
	// write "Addr"
	err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Addr)
	if err != nil {
		err = msgp.WrapError(err, "Addr")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ConfigNodeGroup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "NodeId"
	o = append(o, 0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.NodeId)
	// string "RaftPeer"
	o = append(o, 0xa8, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.RaftPeer)
	// string "Addr"
	o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Addr)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConfigNodeGroup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NodeId":
			z.NodeId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "RaftPeer":
			z.RaftPeer, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RaftPeer")
				return
			}
		case "Addr":
			z.Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ConfigNodeGroup) Msgsize() (s int) {
	s = 1 + 7 + msgp.IntSize + 9 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Addr)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConfigV1) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Num":
			z.Num, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Num")
				return
			}
		case "Shards":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if zb0002 != uint32(NShards) {
				err = msgp.ArrayError{Wanted: uint32(NShards), Got: zb0002}
				return
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		case "Groups":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if z.Groups == nil {
				z.Groups = make(map[int][]ConfigNodeGroup, zb0003)
			} else if len(z.Groups) > 0 {
				for key := range z.Groups {
					delete(z.Groups, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 int
				var za0003 []ConfigNodeGroup
				za0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				var zb0004 uint32
				zb0004, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Groups", za0002)
					return
				}
				if cap(za0003) >= int(zb0004) {
					za0003 = (za0003)[:zb0004]
				} else {
					za0003 = make([]ConfigNodeGroup, zb0004)
				}
				for za0004 := range za0003 {
					var zb0005 uint32
					zb0005, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Groups", za0002, za0004)
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Groups", za0002, za0004)
							return
						}
						switch msgp.UnsafeString(field) {
						case "NodeId":
							za0003[za0004].NodeId, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "Groups", za0002, za0004, "NodeId")
								return
							}
						case "RaftPeer":
							za0003[za0004].RaftPeer, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "Groups", za0002, za0004, "RaftPeer")
								return
							}
						case "Addr":
							za0003[za0004].Addr, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "Groups", za0002, za0004, "Addr")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Groups", za0002, za0004)
								return
							}
						}
					}
				}
				z.Groups[za0002] = za0003
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ConfigV1) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Num"
	err = en.Append(0x83, 0xa3, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Num)
	if err != nil {
		err = msgp.WrapError(err, "Num")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(NShards))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001 := range z.Shards {
		err = en.WriteInt(z.Shards[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	// write "Groups"
	err = en.Append(0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Groups)))
	if err != nil {
		err = msgp.WrapError(err, "Groups")
		return
	}
	for za0002, za0003 := range z.Groups {
		err = en.WriteInt(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Groups")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0003)))
		if err != nil {
			err = msgp.WrapError(err, "Groups", za0002)
			return
		}
		for za0004 := range za0003 {
			// map header, size 3
			// write "NodeId"
			err = en.Append(0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
			if err != nil {
				return
			}
			err = en.WriteInt(za0003[za0004].NodeId)
			if err != nil {
				err = msgp.WrapError(err, "Groups", za0002, za0004, "NodeId")
				return
			}
			// write "RaftPeer"
			err = en.Append(0xa8, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72)
			if err != nil {
				return
			}
			err = en.WriteInt(za0003[za0004].RaftPeer)
			if err != nil {
				err = msgp.WrapError(err, "Groups", za0002, za0004, "RaftPeer")
				return
			}
			// write "Addr"
			err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
			if err != nil {
				return
			}
			err = en.WriteString(za0003[za0004].Addr)
			if err != nil {
				err = msgp.WrapError(err, "Groups", za0002, za0004, "Addr")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ConfigV1) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Num"
	o = append(o, 0x83, 0xa3, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.Num)
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(NShards))
	for za0001 := range z.Shards {
		o = msgp.AppendInt(o, z.Shards[za0001])
	}
	// string "Groups"
	o = append(o, 0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Groups)))
	for za0002, za0003 := range z.Groups {
		o = msgp.AppendInt(o, za0002)
		o = msgp.AppendArrayHeader(o, uint32(len(za0003)))
		for za0004 := range za0003 {
			// map header, size 3
			// string "NodeId"
			o = append(o, 0x83, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
			o = msgp.AppendInt(o, za0003[za0004].NodeId)
			// string "RaftPeer"
			o = append(o, 0xa8, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72)
			o = msgp.AppendInt(o, za0003[za0004].RaftPeer)
			// string "Addr"
			o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
			o = msgp.AppendString(o, za0003[za0004].Addr)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConfigV1) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Num":
			z.Num, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Num")
				return
			}
		case "Shards":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if zb0002 != uint32(NShards) {
				err = msgp.ArrayError{Wanted: uint32(NShards), Got: zb0002}
				return
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		case "Groups":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if z.Groups == nil {
				z.Groups = make(map[int][]ConfigNodeGroup, zb0003)
			} else if len(z.Groups) > 0 {
				for key := range z.Groups {
					delete(z.Groups, key)
				}
			}
			for zb0003 > 0 {
				var za0002 int
				var za0003 []ConfigNodeGroup
				zb0003--
				za0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups", za0002)
					return
				}
				if cap(za0003) >= int(zb0004) {
					za0003 = (za0003)[:zb0004]
				} else {
					za0003 = make([]ConfigNodeGroup, zb0004)
				}
				for za0004 := range za0003 {
					var zb0005 uint32
					zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Groups", za0002, za0004)
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Groups", za0002, za0004)
							return
						}
						switch msgp.UnsafeString(field) {
						case "NodeId":
							za0003[za0004].NodeId, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Groups", za0002, za0004, "NodeId")
								return
							}
						case "RaftPeer":
							za0003[za0004].RaftPeer, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Groups", za0002, za0004, "RaftPeer")
								return
							}
						case "Addr":
							za0003[za0004].Addr, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Groups", za0002, za0004, "Addr")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Groups", za0002, za0004)
								return
							}
						}
					}
				}
				z.Groups[za0002] = za0003
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ConfigV1) Msgsize() (s int) {
	s = 1 + 4 + msgp.IntSize + 7 + msgp.ArrayHeaderSize + (NShards * (msgp.IntSize)) + 7 + msgp.MapHeaderSize
	if z.Groups != nil {
		for _, za0003 := range z.Groups {
			_ = za0003
			s += msgp.StringPrefixSize + msgp.IntSize + msgp.ArrayHeaderSize
			for za0004 := range za0003 {
				s += 1 + 7 + msgp.IntSize + 9 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(za0003[za0004].Addr)
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GroupInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "IsLeader":
			z.IsLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = GroupStatus(zb0002)
			}
		case "Shards":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if z.Shards == nil {
				z.Shards = make(map[int]ShardInfo, zb0003)
			} else if len(z.Shards) > 0 {
				for key := range z.Shards {
					delete(z.Shards, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 int
				var za0002 ShardInfo
				za0001, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
				z.Shards[za0001] = za0002
			}
		case "Size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Peer":
			z.Peer, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		case "RemoteConfNum":
			z.RemoteConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RemoteConfNum")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GroupInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "Id"
	err = en.Append(0x88, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	// write "IsLeader"
	err = en.Append(0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsLeader)
	if err != nil {
		err = msgp.WrapError(err, "IsLeader")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001, za0002 := range z.Shards {
		err = en.WriteInt(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Shards")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "Peer"
	err = en.Append(0xa4, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Peer)
	if err != nil {
		err = msgp.WrapError(err, "Peer")
		return
	}
	// write "RemoteConfNum"
	err = en.Append(0xad, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RemoteConfNum)
	if err != nil {
		err = msgp.WrapError(err, "RemoteConfNum")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GroupInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "Id"
	o = append(o, 0x88, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	// string "IsLeader"
	o = append(o, 0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.IsLeader)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Shards)))
	for za0001, za0002 := range z.Shards {
		o = msgp.AppendInt(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "Peer"
	o = append(o, 0xa4, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.Peer)
	// string "RemoteConfNum"
	o = append(o, 0xad, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.RemoteConfNum)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GroupInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "IsLeader":
			z.IsLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = GroupStatus(zb0002)
			}
		case "Shards":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if z.Shards == nil {
				z.Shards = make(map[int]ShardInfo, zb0003)
			} else if len(z.Shards) > 0 {
				for key := range z.Shards {
					delete(z.Shards, key)
				}
			}
			for zb0003 > 0 {
				var za0001 int
				var za0002 ShardInfo
				zb0003--
				za0001, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
				z.Shards[za0001] = za0002
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Peer":
			z.Peer, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		case "RemoteConfNum":
			z.RemoteConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteConfNum")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GroupInfo) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 8 + msgp.IntSize + 9 + msgp.BoolSize + 7 + msgp.IntSize + 7 + msgp.MapHeaderSize
	if z.Shards != nil {
		for _, za0002 := range z.Shards {
			_ = za0002
			s += msgp.StringPrefixSize + msgp.IntSize + za0002.Msgsize()
		}
	}
	s += 5 + msgp.Int64Size + 5 + msgp.IntSize + 14 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GroupStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = GroupStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z GroupStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z GroupStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GroupStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = GroupStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z GroupStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HeartbeatArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "NodeId":
			z.NodeId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "Addr":
			z.Addr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "Groups":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if z.Groups == nil {
				z.Groups = make(map[int]*GroupInfo, zb0003)
			} else if len(z.Groups) > 0 {
				for key := range z.Groups {
					delete(z.Groups, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 int
				var za0002 *GroupInfo
				za0001, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Groups", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(GroupInfo)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Groups", za0001)
						return
					}
				}
				z.Groups[za0001] = za0002
			}
		case "MetricAddr":
			z.MetricAddr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MetricAddr")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HeartbeatArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "BaseArgs"
	err = en.Append(0x85, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Seq")
		return
	}
	// write "NodeId"
	err = en.Append(0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "NodeId")
		return
	}
	// write "Addr"
	err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Addr)
	if err != nil {
		err = msgp.WrapError(err, "Addr")
		return
	}
	// write "Groups"
	err = en.Append(0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Groups)))
	if err != nil {
		err = msgp.WrapError(err, "Groups")
		return
	}
	for za0001, za0002 := range z.Groups {
		err = en.WriteInt(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Groups")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Groups", za0001)
				return
			}
		}
	}
	// write "MetricAddr"
	err = en.Append(0xaa, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.MetricAddr)
	if err != nil {
		err = msgp.WrapError(err, "MetricAddr")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HeartbeatArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "BaseArgs"
	o = append(o, 0x85, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.BaseArgs.Seq)
	// string "NodeId"
	o = append(o, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.NodeId)
	// string "Addr"
	o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Addr)
	// string "Groups"
	o = append(o, 0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Groups)))
	for za0001, za0002 := range z.Groups {
		o = msgp.AppendInt(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Groups", za0001)
				return
			}
		}
	}
	// string "MetricAddr"
	o = append(o, 0xaa, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.MetricAddr)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HeartbeatArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "NodeId":
			z.NodeId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "Addr":
			z.Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "Groups":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if z.Groups == nil {
				z.Groups = make(map[int]*GroupInfo, zb0003)
			} else if len(z.Groups) > 0 {
				for key := range z.Groups {
					delete(z.Groups, key)
				}
			}
			for zb0003 > 0 {
				var za0001 int
				var za0002 *GroupInfo
				zb0003--
				za0001, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(GroupInfo)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Groups", za0001)
						return
					}
				}
				z.Groups[za0001] = za0002
			}
		case "MetricAddr":
			z.MetricAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetricAddr")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HeartbeatArgs) Msgsize() (s int) {
	s = 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 7 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Addr) + 7 + msgp.MapHeaderSize
	if z.Groups != nil {
		for _, za0002 := range z.Groups {
			_ = za0002
			s += msgp.StringPrefixSize + msgp.IntSize
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += 11 + msgp.StringPrefixSize + len(z.MetricAddr)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HeartbeatReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "Configs":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Configs")
				return
			}
			if z.Configs == nil {
				z.Configs = make(map[int]ConfigV1, zb0002)
			} else if len(z.Configs) > 0 {
				for key := range z.Configs {
					delete(z.Configs, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 int
				var za0002 ConfigV1
				za0001, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Configs")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Configs", za0001)
					return
				}
				z.Configs[za0001] = za0002
			}
		case "PrevConfigs":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PrevConfigs")
				return
			}
			if z.PrevConfigs == nil {
				z.PrevConfigs = make(map[int]ConfigV1, zb0003)
			} else if len(z.PrevConfigs) > 0 {
				for key := range z.PrevConfigs {
					delete(z.PrevConfigs, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 int
				var za0004 ConfigV1
				za0003, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "PrevConfigs")
					return
				}
				err = za0004.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "PrevConfigs", za0003)
					return
				}
				z.PrevConfigs[za0003] = za0004
			}
		case "LatestConf":
			err = z.LatestConf.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LatestConf")
				return
			}
		case "Nodes":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if z.Nodes == nil {
				z.Nodes = make(map[int]NodeInfo, zb0004)
			} else if len(z.Nodes) > 0 {
				for key := range z.Nodes {
					delete(z.Nodes, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0005 int
				var za0006 NodeInfo
				za0005, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Nodes")
					return
				}
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0005)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Nodes", za0005)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Id":
						za0006.Id, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0005, "Id")
							return
						}
					case "Addr":
						za0006.Addr, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0005, "Addr")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0005)
							return
						}
					}
				}
				z.Nodes[za0005] = za0006
			}
		case "Groups":
			var zb0006 uint32
			zb0006, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if z.Groups == nil {
				z.Groups = make(map[int]GroupInfo, zb0006)
			} else if len(z.Groups) > 0 {
				for key := range z.Groups {
					delete(z.Groups, key)
				}
			}
			for zb0006 > 0 {
				zb0006--
				var za0007 int
				var za0008 GroupInfo
				za0007, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				err = za0008.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Groups", za0007)
					return
				}
				z.Groups[za0007] = za0008
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HeartbeatReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "WrongLeader"
	err = en.Append(0x87, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WrongLeader)
	if err != nil {
		err = msgp.WrapError(err, "WrongLeader")
		return
	}
	// write "Err"
	err = en.Append(0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// write "Configs"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Configs)))
	if err != nil {
		err = msgp.WrapError(err, "Configs")
		return
	}
	for za0001, za0002 := range z.Configs {
		err = en.WriteInt(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Configs")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Configs", za0001)
			return
		}
	}
	// write "PrevConfigs"
	err = en.Append(0xab, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.PrevConfigs)))
	if err != nil {
		err = msgp.WrapError(err, "PrevConfigs")
		return
	}
	for za0003, za0004 := range z.PrevConfigs {
		err = en.WriteInt(za0003)
		if err != nil {
			err = msgp.WrapError(err, "PrevConfigs")
			return
		}
		err = za0004.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "PrevConfigs", za0003)
			return
		}
	}
	// write "LatestConf"
	err = en.Append(0xaa, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66)
	if err != nil {
		return
	}
	err = z.LatestConf.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LatestConf")
		return
	}
	// write "Nodes"
	err = en.Append(0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Nodes)))
	if err != nil {
		err = msgp.WrapError(err, "Nodes")
		return
	}
	for za0005, za0006 := range z.Nodes {
		err = en.WriteInt(za0005)
		if err != nil {
			err = msgp.WrapError(err, "Nodes")
			return
		}
		// map header, size 2
		// write "Id"
		err = en.Append(0x82, 0xa2, 0x49, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(za0006.Id)
		if err != nil {
			err = msgp.WrapError(err, "Nodes", za0005, "Id")
			return
		}
		// write "Addr"
		err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
		if err != nil {
			return
		}
		err = en.WriteString(za0006.Addr)
		if err != nil {
			err = msgp.WrapError(err, "Nodes", za0005, "Addr")
			return
		}
	}
	// write "Groups"
	err = en.Append(0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Groups)))
	if err != nil {
		err = msgp.WrapError(err, "Groups")
		return
	}
	for za0007, za0008 := range z.Groups {
		err = en.WriteInt(za0007)
		if err != nil {
			err = msgp.WrapError(err, "Groups")
			return
		}
		err = za0008.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Groups", za0007)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HeartbeatReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "WrongLeader"
	o = append(o, 0x87, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.WrongLeader)
	// string "Err"
	o = append(o, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// string "Configs"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Configs)))
	for za0001, za0002 := range z.Configs {
		o = msgp.AppendInt(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Configs", za0001)
			return
		}
	}
	// string "PrevConfigs"
	o = append(o, 0xab, 0x50, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.PrevConfigs)))
	for za0003, za0004 := range z.PrevConfigs {
		o = msgp.AppendInt(o, za0003)
		o, err = za0004.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "PrevConfigs", za0003)
			return
		}
	}
	// string "LatestConf"
	o = append(o, 0xaa, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66)
	o, err = z.LatestConf.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LatestConf")
		return
	}
	// string "Nodes"
	o = append(o, 0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Nodes)))
	for za0005, za0006 := range z.Nodes {
		o = msgp.AppendInt(o, za0005)
		// map header, size 2
		// string "Id"
		o = append(o, 0x82, 0xa2, 0x49, 0x64)
		o = msgp.AppendInt(o, za0006.Id)
		// string "Addr"
		o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
		o = msgp.AppendString(o, za0006.Addr)
	}
	// string "Groups"
	o = append(o, 0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Groups)))
	for za0007, za0008 := range z.Groups {
		o = msgp.AppendInt(o, za0007)
		o, err = za0008.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Groups", za0007)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HeartbeatReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "Configs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Configs")
				return
			}
			if z.Configs == nil {
				z.Configs = make(map[int]ConfigV1, zb0002)
			} else if len(z.Configs) > 0 {
				for key := range z.Configs {
					delete(z.Configs, key)
				}
			}
			for zb0002 > 0 {
				var za0001 int
				var za0002 ConfigV1
				zb0002--
				za0001, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Configs")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Configs", za0001)
					return
				}
				z.Configs[za0001] = za0002
			}
		case "PrevConfigs":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevConfigs")
				return
			}
			if z.PrevConfigs == nil {
				z.PrevConfigs = make(map[int]ConfigV1, zb0003)
			} else if len(z.PrevConfigs) > 0 {
				for key := range z.PrevConfigs {
					delete(z.PrevConfigs, key)
				}
			}
			for zb0003 > 0 {
				var za0003 int
				var za0004 ConfigV1
				zb0003--
				za0003, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PrevConfigs")
					return
				}
				bts, err = za0004.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "PrevConfigs", za0003)
					return
				}
				z.PrevConfigs[za0003] = za0004
			}
		case "LatestConf":
			bts, err = z.LatestConf.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LatestConf")
				return
			}
		case "Nodes":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if z.Nodes == nil {
				z.Nodes = make(map[int]NodeInfo, zb0004)
			} else if len(z.Nodes) > 0 {
				for key := range z.Nodes {
					delete(z.Nodes, key)
				}
			}
			for zb0004 > 0 {
				var za0005 int
				var za0006 NodeInfo
				zb0004--
				za0005, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodes")
					return
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0005)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Nodes", za0005)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Id":
						za0006.Id, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0005, "Id")
							return
						}
					case "Addr":
						za0006.Addr, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0005, "Addr")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Nodes", za0005)
							return
						}
					}
				}
				z.Nodes[za0005] = za0006
			}
		case "Groups":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if z.Groups == nil {
				z.Groups = make(map[int]GroupInfo, zb0006)
			} else if len(z.Groups) > 0 {
				for key := range z.Groups {
					delete(z.Groups, key)
				}
			}
			for zb0006 > 0 {
				var za0007 int
				var za0008 GroupInfo
				zb0006--
				za0007, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups")
					return
				}
				bts, err = za0008.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups", za0007)
					return
				}
				z.Groups[za0007] = za0008
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HeartbeatReply) Msgsize() (s int) {
	s = 1 + 12 + msgp.BoolSize + 4 + z.Err.Msgsize() + 8 + msgp.MapHeaderSize
	if z.Configs != nil {
		for _, za0002 := range z.Configs {
			_ = za0002
			s += msgp.StringPrefixSize + msgp.IntSize + za0002.Msgsize()
		}
	}
	s += 12 + msgp.MapHeaderSize
	if z.PrevConfigs != nil {
		for _, za0004 := range z.PrevConfigs {
			_ = za0004
			s += msgp.StringPrefixSize + msgp.IntSize + za0004.Msgsize()
		}
	}
	s += 11 + z.LatestConf.Msgsize() + 6 + msgp.MapHeaderSize
	if z.Nodes != nil {
		for _, za0006 := range z.Nodes {
			_ = za0006
			s += msgp.StringPrefixSize + msgp.IntSize + 1 + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(za0006.Addr)
		}
	}
	s += 7 + msgp.MapHeaderSize
	if z.Groups != nil {
		for _, za0008 := range z.Groups {
			_ = za0008
			s += msgp.StringPrefixSize + msgp.IntSize + za0008.Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *JoinArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "Nodes":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if z.Nodes == nil {
				z.Nodes = make(map[int][]int, zb0003)
			} else if len(z.Nodes) > 0 {
				for key := range z.Nodes {
					delete(z.Nodes, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 int
				var za0002 []int
				za0001, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Nodes")
					return
				}
				var zb0004 uint32
				zb0004, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
				if cap(za0002) >= int(zb0004) {
					za0002 = (za0002)[:zb0004]
				} else {
					za0002 = make([]int, zb0004)
				}
				for za0003 := range za0002 {
					za0002[za0003], err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Nodes", za0001, za0003)
						return
					}
				}
				z.Nodes[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *JoinArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "BaseArgs"
	err = en.Append(0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Seq")
		return
	}
	// write "Nodes"
	err = en.Append(0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Nodes)))
	if err != nil {
		err = msgp.WrapError(err, "Nodes")
		return
	}
	for za0001, za0002 := range z.Nodes {
		err = en.WriteInt(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Nodes")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Nodes", za0001)
			return
		}
		for za0003 := range za0002 {
			err = en.WriteInt(za0002[za0003])
			if err != nil {
				err = msgp.WrapError(err, "Nodes", za0001, za0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *JoinArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "BaseArgs"
	o = append(o, 0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.BaseArgs.Seq)
	// string "Nodes"
	o = append(o, 0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Nodes)))
	for za0001, za0002 := range z.Nodes {
		o = msgp.AppendInt(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o = msgp.AppendInt(o, za0002[za0003])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *JoinArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "Nodes":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if z.Nodes == nil {
				z.Nodes = make(map[int][]int, zb0003)
			} else if len(z.Nodes) > 0 {
				for key := range z.Nodes {
					delete(z.Nodes, key)
				}
			}
			for zb0003 > 0 {
				var za0001 int
				var za0002 []int
				zb0003--
				za0001, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodes")
					return
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
				if cap(za0002) >= int(zb0004) {
					za0002 = (za0002)[:zb0004]
				} else {
					za0002 = make([]int, zb0004)
				}
				for za0003 := range za0002 {
					za0002[za0003], bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Nodes", za0001, za0003)
						return
					}
				}
				z.Nodes[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *JoinArgs) Msgsize() (s int) {
	s = 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 6 + msgp.MapHeaderSize
	if z.Nodes != nil {
		for _, za0002 := range z.Nodes {
			_ = za0002
			s += msgp.StringPrefixSize + msgp.IntSize + msgp.ArrayHeaderSize + (len(za0002) * (msgp.IntSize))
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *JoinReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *JoinReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "WrongLeader"
	err = en.Append(0x82, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WrongLeader)
	if err != nil {
		err = msgp.WrapError(err, "WrongLeader")
		return
	}
	// write "Err"
	err = en.Append(0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *JoinReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "WrongLeader"
	o = append(o, 0x82, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.WrongLeader)
	// string "Err"
	o = append(o, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *JoinReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *JoinReply) Msgsize() (s int) {
	s = 1 + 12 + msgp.BoolSize + 4 + z.Err.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LeaveArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "GIDs":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "GIDs")
				return
			}
			if cap(z.GIDs) >= int(zb0003) {
				z.GIDs = (z.GIDs)[:zb0003]
			} else {
				z.GIDs = make([]int, zb0003)
			}
			for za0001 := range z.GIDs {
				z.GIDs[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "GIDs", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LeaveArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "BaseArgs"
	err = en.Append(0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Seq")
		return
	}
	// write "GIDs"
	err = en.Append(0xa4, 0x47, 0x49, 0x44, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.GIDs)))
	if err != nil {
		err = msgp.WrapError(err, "GIDs")
		return
	}
	for za0001 := range z.GIDs {
		err = en.WriteInt(z.GIDs[za0001])
		if err != nil {
			err = msgp.WrapError(err, "GIDs", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LeaveArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "BaseArgs"
	o = append(o, 0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.BaseArgs.Seq)
	// string "GIDs"
	o = append(o, 0xa4, 0x47, 0x49, 0x44, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.GIDs)))
	for za0001 := range z.GIDs {
		o = msgp.AppendInt(o, z.GIDs[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LeaveArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "GIDs":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GIDs")
				return
			}
			if cap(z.GIDs) >= int(zb0003) {
				z.GIDs = (z.GIDs)[:zb0003]
			} else {
				z.GIDs = make([]int, zb0003)
			}
			for za0001 := range z.GIDs {
				z.GIDs[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GIDs", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LeaveArgs) Msgsize() (s int) {
	s = 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + msgp.ArrayHeaderSize + (len(z.GIDs) * (msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LeaveReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LeaveReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "WrongLeader"
	err = en.Append(0x82, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WrongLeader)
	if err != nil {
		err = msgp.WrapError(err, "WrongLeader")
		return
	}
	// write "Err"
	err = en.Append(0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LeaveReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "WrongLeader"
	o = append(o, 0x82, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.WrongLeader)
	// string "Err"
	o = append(o, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LeaveReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LeaveReply) Msgsize() (s int) {
	s = 1 + 12 + msgp.BoolSize + 4 + z.Err.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MoveArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "Shard":
			z.Shard, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Shard")
				return
			}
		case "GID":
			z.GID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MoveArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "BaseArgs"
	err = en.Append(0x83, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Seq")
		return
	}
	// write "Shard"
	err = en.Append(0xa5, 0x53, 0x68, 0x61, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Shard)
	if err != nil {
		err = msgp.WrapError(err, "Shard")
		return
	}
	// write "GID"
	err = en.Append(0xa3, 0x47, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.GID)
	if err != nil {
		err = msgp.WrapError(err, "GID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MoveArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "BaseArgs"
	o = append(o, 0x83, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.BaseArgs.Seq)
	// string "Shard"
	o = append(o, 0xa5, 0x53, 0x68, 0x61, 0x72, 0x64)
	o = msgp.AppendInt(o, z.Shard)
	// string "GID"
	o = append(o, 0xa3, 0x47, 0x49, 0x44)
	o = msgp.AppendInt(o, z.GID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MoveArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "Shard":
			z.Shard, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shard")
				return
			}
		case "GID":
			z.GID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MoveArgs) Msgsize() (s int) {
	s = 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 6 + msgp.IntSize + 4 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MoveReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MoveReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "WrongLeader"
	err = en.Append(0x82, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WrongLeader)
	if err != nil {
		err = msgp.WrapError(err, "WrongLeader")
		return
	}
	// write "Err"
	err = en.Append(0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MoveReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "WrongLeader"
	o = append(o, 0x82, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.WrongLeader)
	// string "Err"
	o = append(o, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MoveReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MoveReply) Msgsize() (s int) {
	s = 1 + 12 + msgp.BoolSize + 4 + z.Err.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NodeInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Addr":
			z.Addr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z NodeInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Id"
	err = en.Append(0x82, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Addr"
	err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Addr)
	if err != nil {
		err = msgp.WrapError(err, "Addr")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z NodeInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Id"
	o = append(o, 0x82, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "Addr"
	o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Addr)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NodeInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Addr":
			z.Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NodeInfo) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Addr)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NodeStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = NodeStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z NodeStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z NodeStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NodeStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = NodeStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NodeStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpBase) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Cid":
			z.Cid, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OpBase) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Cid"
	err = en.Append(0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Cid)
	if err != nil {
		err = msgp.WrapError(err, "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Seq)
	if err != nil {
		err = msgp.WrapError(err, "Seq")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OpBase) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.Type)
	// string "Cid"
	o = append(o, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.Seq)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpBase) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Cid":
			z.Cid, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OpBase) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 4 + msgp.Int64Size + 4 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpHeartbeatCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			err = z.Args.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OpHeartbeatCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "OpBase"
	err = en.Append(0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OpBase.Type)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Type")
		return
	}
	// write "Cid"
	err = en.Append(0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Seq")
		return
	}
	// write "Args"
	err = en.Append(0xa4, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	err = z.Args.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Args")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OpHeartbeatCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OpBase"
	o = append(o, 0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.OpBase.Type)
	// string "Cid"
	o = append(o, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.OpBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.OpBase.Seq)
	// string "Args"
	o = append(o, 0xa4, 0x41, 0x72, 0x67, 0x73)
	o, err = z.Args.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Args")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpHeartbeatCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			bts, err = z.Args.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OpHeartbeatCmd) Msgsize() (s int) {
	s = 1 + 7 + 1 + 5 + msgp.IntSize + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + z.Args.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpJoinCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			err = z.Args.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OpJoinCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "OpBase"
	err = en.Append(0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OpBase.Type)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Type")
		return
	}
	// write "Cid"
	err = en.Append(0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Seq")
		return
	}
	// write "Args"
	err = en.Append(0xa4, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	err = z.Args.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Args")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OpJoinCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OpBase"
	o = append(o, 0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.OpBase.Type)
	// string "Cid"
	o = append(o, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.OpBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.OpBase.Seq)
	// string "Args"
	o = append(o, 0xa4, 0x41, 0x72, 0x67, 0x73)
	o, err = z.Args.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Args")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpJoinCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			bts, err = z.Args.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OpJoinCmd) Msgsize() (s int) {
	s = 1 + 7 + 1 + 5 + msgp.IntSize + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + z.Args.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpLeaveCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
				switch msgp.UnsafeString(field) {
				case "BaseArgs":
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Args", "BaseArgs")
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Args", "BaseArgs")
							return
						}
						switch msgp.UnsafeString(field) {
						case "Cid":
							z.Args.BaseArgs.Cid, err = dc.ReadInt64()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
								return
							}
						case "Seq":
							z.Args.BaseArgs.Seq, err = dc.ReadInt64()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs")
								return
							}
						}
					}
				case "GIDs":
					var zb0005 uint32
					zb0005, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Args", "GIDs")
						return
					}
					if cap(z.Args.GIDs) >= int(zb0005) {
						z.Args.GIDs = (z.Args.GIDs)[:zb0005]
					} else {
						z.Args.GIDs = make([]int, zb0005)
					}
					for za0001 := range z.Args.GIDs {
						z.Args.GIDs[za0001], err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Args", "GIDs", za0001)
							return
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Args")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OpLeaveCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "OpBase"
	err = en.Append(0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OpBase.Type)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Type")
		return
	}
	// write "Cid"
	err = en.Append(0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Seq")
		return
	}
	// write "Args"
	err = en.Append(0xa4, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "BaseArgs"
	err = en.Append(0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Args.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Args.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
		return
	}
	// write "GIDs"
	err = en.Append(0xa4, 0x47, 0x49, 0x44, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Args.GIDs)))
	if err != nil {
		err = msgp.WrapError(err, "Args", "GIDs")
		return
	}
	for za0001 := range z.Args.GIDs {
		err = en.WriteInt(z.Args.GIDs[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Args", "GIDs", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OpLeaveCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OpBase"
	o = append(o, 0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.OpBase.Type)
	// string "Cid"
	o = append(o, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.OpBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.OpBase.Seq)
	// string "Args"
	o = append(o, 0xa4, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "BaseArgs"
	o = append(o, 0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Args.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.Args.BaseArgs.Seq)
	// string "GIDs"
	o = append(o, 0xa4, 0x47, 0x49, 0x44, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Args.GIDs)))
	for za0001 := range z.Args.GIDs {
		o = msgp.AppendInt(o, z.Args.GIDs[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpLeaveCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
				switch msgp.UnsafeString(field) {
				case "BaseArgs":
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args", "BaseArgs")
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Args", "BaseArgs")
							return
						}
						switch msgp.UnsafeString(field) {
						case "Cid":
							z.Args.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
								return
							}
						case "Seq":
							z.Args.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs")
								return
							}
						}
					}
				case "GIDs":
					var zb0005 uint32
					zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args", "GIDs")
						return
					}
					if cap(z.Args.GIDs) >= int(zb0005) {
						z.Args.GIDs = (z.Args.GIDs)[:zb0005]
					} else {
						z.Args.GIDs = make([]int, zb0005)
					}
					for za0001 := range z.Args.GIDs {
						z.Args.GIDs[za0001], bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Args", "GIDs", za0001)
							return
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OpLeaveCmd) Msgsize() (s int) {
	s = 1 + 7 + 1 + 5 + msgp.IntSize + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + msgp.ArrayHeaderSize + (len(z.Args.GIDs) * (msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpMoveCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
				switch msgp.UnsafeString(field) {
				case "BaseArgs":
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Args", "BaseArgs")
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Args", "BaseArgs")
							return
						}
						switch msgp.UnsafeString(field) {
						case "Cid":
							z.Args.BaseArgs.Cid, err = dc.ReadInt64()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
								return
							}
						case "Seq":
							z.Args.BaseArgs.Seq, err = dc.ReadInt64()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs")
								return
							}
						}
					}
				case "Shard":
					z.Args.Shard, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Args", "Shard")
						return
					}
				case "GID":
					z.Args.GID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Args", "GID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Args")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OpMoveCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "OpBase"
	err = en.Append(0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OpBase.Type)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Type")
		return
	}
	// write "Cid"
	err = en.Append(0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Seq")
		return
	}
	// write "Args"
	err = en.Append(0xa4, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 3
	// write "BaseArgs"
	err = en.Append(0x83, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Args.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Args.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
		return
	}
	// write "Shard"
	err = en.Append(0xa5, 0x53, 0x68, 0x61, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Args.Shard)
	if err != nil {
		err = msgp.WrapError(err, "Args", "Shard")
		return
	}
	// write "GID"
	err = en.Append(0xa3, 0x47, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Args.GID)
	if err != nil {
		err = msgp.WrapError(err, "Args", "GID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OpMoveCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OpBase"
	o = append(o, 0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.OpBase.Type)
	// string "Cid"
	o = append(o, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.OpBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.OpBase.Seq)
	// string "Args"
	o = append(o, 0xa4, 0x41, 0x72, 0x67, 0x73)
	// map header, size 3
	// string "BaseArgs"
	o = append(o, 0x83, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Args.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.Args.BaseArgs.Seq)
	// string "Shard"
	o = append(o, 0xa5, 0x53, 0x68, 0x61, 0x72, 0x64)
	o = msgp.AppendInt(o, z.Args.Shard)
	// string "GID"
	o = append(o, 0xa3, 0x47, 0x49, 0x44)
	o = msgp.AppendInt(o, z.Args.GID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpMoveCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
				switch msgp.UnsafeString(field) {
				case "BaseArgs":
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args", "BaseArgs")
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Args", "BaseArgs")
							return
						}
						switch msgp.UnsafeString(field) {
						case "Cid":
							z.Args.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
								return
							}
						case "Seq":
							z.Args.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs")
								return
							}
						}
					}
				case "Shard":
					z.Args.Shard, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args", "Shard")
						return
					}
				case "GID":
					z.Args.GID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args", "GID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OpMoveCmd) Msgsize() (s int) {
	s = 1 + 7 + 1 + 5 + msgp.IntSize + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 6 + msgp.IntSize + 4 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpQueryCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
				switch msgp.UnsafeString(field) {
				case "BaseArgs":
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Args", "BaseArgs")
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Args", "BaseArgs")
							return
						}
						switch msgp.UnsafeString(field) {
						case "Cid":
							z.Args.BaseArgs.Cid, err = dc.ReadInt64()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
								return
							}
						case "Seq":
							z.Args.BaseArgs.Seq, err = dc.ReadInt64()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs")
								return
							}
						}
					}
				case "Num":
					z.Args.Num, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Args", "Num")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Args")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OpQueryCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "OpBase"
	err = en.Append(0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OpBase.Type)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Type")
		return
	}
	// write "Cid"
	err = en.Append(0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Seq")
		return
	}
	// write "Args"
	err = en.Append(0xa4, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "BaseArgs"
	err = en.Append(0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Args.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Args.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
		return
	}
	// write "Num"
	err = en.Append(0xa3, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Args.Num)
	if err != nil {
		err = msgp.WrapError(err, "Args", "Num")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OpQueryCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OpBase"
	o = append(o, 0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.OpBase.Type)
	// string "Cid"
	o = append(o, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.OpBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.OpBase.Seq)
	// string "Args"
	o = append(o, 0xa4, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "BaseArgs"
	o = append(o, 0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Args.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.Args.BaseArgs.Seq)
	// string "Num"
	o = append(o, 0xa3, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.Args.Num)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpQueryCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Args")
					return
				}
				switch msgp.UnsafeString(field) {
				case "BaseArgs":
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args", "BaseArgs")
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Args", "BaseArgs")
							return
						}
						switch msgp.UnsafeString(field) {
						case "Cid":
							z.Args.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Cid")
								return
							}
						case "Seq":
							z.Args.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs", "Seq")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Args", "BaseArgs")
								return
							}
						}
					}
				case "Num":
					z.Args.Num, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args", "Num")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Args")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OpQueryCmd) Msgsize() (s int) {
	s = 1 + 7 + 1 + 5 + msgp.IntSize + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 4 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpShowCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			err = z.Args.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OpShowCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "OpBase"
	err = en.Append(0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.OpBase.Type)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Type")
		return
	}
	// write "Cid"
	err = en.Append(0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OpBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "OpBase", "Seq")
		return
	}
	// write "Args"
	err = en.Append(0xa4, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	err = z.Args.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Args")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OpShowCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "OpBase"
	o = append(o, 0x82, 0xa6, 0x4f, 0x70, 0x42, 0x61, 0x73, 0x65)
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendInt(o, z.OpBase.Type)
	// string "Cid"
	o = append(o, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.OpBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.OpBase.Seq)
	// string "Args"
	o = append(o, 0xa4, 0x41, 0x72, 0x67, 0x73)
	o, err = z.Args.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Args")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpShowCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "OpBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "OpBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.OpBase.Type, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Type")
						return
					}
				case "Cid":
					z.OpBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Cid")
						return
					}
				case "Seq":
					z.OpBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "OpBase")
						return
					}
				}
			}
		case "Args":
			bts, err = z.Args.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Args")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OpShowCmd) Msgsize() (s int) {
	s = 1 + 7 + 1 + 5 + msgp.IntSize + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + z.Args.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueryArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "Num":
			z.Num, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Num")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QueryArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "BaseArgs"
	err = en.Append(0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Cid)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.BaseArgs.Seq)
	if err != nil {
		err = msgp.WrapError(err, "BaseArgs", "Seq")
		return
	}
	// write "Num"
	err = en.Append(0xa3, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Num)
	if err != nil {
		err = msgp.WrapError(err, "Num")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "BaseArgs"
	o = append(o, 0x82, 0xa8, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x73)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.BaseArgs.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.BaseArgs.Seq)
	// string "Num"
	o = append(o, 0xa3, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.Num)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BaseArgs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BaseArgs")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "BaseArgs")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.BaseArgs.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Cid")
						return
					}
				case "Seq":
					z.BaseArgs.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "BaseArgs")
						return
					}
				}
			}
		case "Num":
			z.Num, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Num")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryArgs) Msgsize() (s int) {
	s = 1 + 9 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 4 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueryReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "Config":
			err = z.Config.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Config")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QueryReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "WrongLeader"
	err = en.Append(0x83, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.WrongLeader)
	if err != nil {
		err = msgp.WrapError(err, "WrongLeader")
		return
	}
	// write "Err"
	err = en.Append(0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// write "Config"
	err = en.Append(0xa6, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67)
	if err != nil {
		return
	}
	err = z.Config.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Config")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "WrongLeader"
	o = append(o, 0x83, 0xab, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.WrongLeader)
	// string "Err"
	o = append(o, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// string "Config"
	o = append(o, 0xa6, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67)
	o, err = z.Config.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Config")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WrongLeader":
			z.WrongLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WrongLeader")
				return
			}
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "Config":
			bts, err = z.Config.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Config")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryReply) Msgsize() (s int) {
	s = 1 + 12 + msgp.BoolSize + 4 + z.Err.Msgsize() + 7 + z.Config.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShardInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Gid":
			z.Gid, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = ShardStatus(zb0002)
			}
		case "Size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Capacity":
			z.Capacity, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Capacity")
				return
			}
		case "RangeStart":
			z.RangeStart, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RangeStart")
				return
			}
		case "RangeEnd":
			z.RangeEnd, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RangeEnd")
				return
			}
		case "ExOwner":
			z.ExOwner, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ExOwner")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShardInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "Id"
	err = en.Append(0x88, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Gid"
	err = en.Append(0xa3, 0x47, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Gid)
	if err != nil {
		err = msgp.WrapError(err, "Gid")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "Capacity"
	err = en.Append(0xa8, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Capacity)
	if err != nil {
		err = msgp.WrapError(err, "Capacity")
		return
	}
	// write "RangeStart"
	err = en.Append(0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.RangeStart)
	if err != nil {
		err = msgp.WrapError(err, "RangeStart")
		return
	}
	// write "RangeEnd"
	err = en.Append(0xa8, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.RangeEnd)
	if err != nil {
		err = msgp.WrapError(err, "RangeEnd")
		return
	}
	// write "ExOwner"
	err = en.Append(0xa7, 0x45, 0x78, 0x4f, 0x77, 0x6e, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ExOwner)
	if err != nil {
		err = msgp.WrapError(err, "ExOwner")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShardInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "Id"
	o = append(o, 0x88, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "Gid"
	o = append(o, 0xa3, 0x47, 0x69, 0x64)
	o = msgp.AppendInt(o, z.Gid)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "Capacity"
	o = append(o, 0xa8, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	o = msgp.AppendUint64(o, z.Capacity)
	// string "RangeStart"
	o = append(o, 0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendString(o, z.RangeStart)
	// string "RangeEnd"
	o = append(o, 0xa8, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64)
	o = msgp.AppendString(o, z.RangeEnd)
	// string "ExOwner"
	o = append(o, 0xa7, 0x45, 0x78, 0x4f, 0x77, 0x6e, 0x65, 0x72)
	o = msgp.AppendInt(o, z.ExOwner)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShardInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Gid":
			z.Gid, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = ShardStatus(zb0002)
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Capacity":
			z.Capacity, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Capacity")
				return
			}
		case "RangeStart":
			z.RangeStart, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RangeStart")
				return
			}
		case "RangeEnd":
			z.RangeEnd, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RangeEnd")
				return
			}
		case "ExOwner":
			z.ExOwner, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExOwner")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShardInfo) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 4 + msgp.IntSize + 7 + msgp.IntSize + 5 + msgp.Int64Size + 9 + msgp.Uint64Size + 11 + msgp.StringPrefixSize + len(z.RangeStart) + 9 + msgp.StringPrefixSize + len(z.RangeEnd) + 8 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShardStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ShardStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ShardStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ShardStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShardStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ShardStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ShardStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShowArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Nodes":
			z.Nodes, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
		case "Groups":
			z.Groups, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
		case "Shards":
			z.Shards, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
		case "NodeIds":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NodeIds")
				return
			}
			if cap(z.NodeIds) >= int(zb0002) {
				z.NodeIds = (z.NodeIds)[:zb0002]
			} else {
				z.NodeIds = make([]int, zb0002)
			}
			for za0001 := range z.NodeIds {
				z.NodeIds[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "NodeIds", za0001)
					return
				}
			}
		case "GIDs":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "GIDs")
				return
			}
			if cap(z.GIDs) >= int(zb0003) {
				z.GIDs = (z.GIDs)[:zb0003]
			} else {
				z.GIDs = make([]int, zb0003)
			}
			for za0002 := range z.GIDs {
				z.GIDs[za0002], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "GIDs", za0002)
					return
				}
			}
		case "ShardIds":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ShardIds")
				return
			}
			if cap(z.ShardIds) >= int(zb0004) {
				z.ShardIds = (z.ShardIds)[:zb0004]
			} else {
				z.ShardIds = make([]int, zb0004)
			}
			for za0003 := range z.ShardIds {
				z.ShardIds[za0003], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "ShardIds", za0003)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShowArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Nodes"
	err = en.Append(0x86, 0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Nodes)
	if err != nil {
		err = msgp.WrapError(err, "Nodes")
		return
	}
	// write "Groups"
	err = en.Append(0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Groups)
	if err != nil {
		err = msgp.WrapError(err, "Groups")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Shards)
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	// write "NodeIds"
	err = en.Append(0xa7, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NodeIds)))
	if err != nil {
		err = msgp.WrapError(err, "NodeIds")
		return
	}
	for za0001 := range z.NodeIds {
		err = en.WriteInt(z.NodeIds[za0001])
		if err != nil {
			err = msgp.WrapError(err, "NodeIds", za0001)
			return
		}
	}
	// write "GIDs"
	err = en.Append(0xa4, 0x47, 0x49, 0x44, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.GIDs)))
	if err != nil {
		err = msgp.WrapError(err, "GIDs")
		return
	}
	for za0002 := range z.GIDs {
		err = en.WriteInt(z.GIDs[za0002])
		if err != nil {
			err = msgp.WrapError(err, "GIDs", za0002)
			return
		}
	}
	// write "ShardIds"
	err = en.Append(0xa8, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ShardIds)))
	if err != nil {
		err = msgp.WrapError(err, "ShardIds")
		return
	}
	for za0003 := range z.ShardIds {
		err = en.WriteInt(z.ShardIds[za0003])
		if err != nil {
			err = msgp.WrapError(err, "ShardIds", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShowArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Nodes"
	o = append(o, 0x86, 0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	o = msgp.AppendBool(o, z.Nodes)
	// string "Groups"
	o = append(o, 0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	o = msgp.AppendBool(o, z.Groups)
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendBool(o, z.Shards)
	// string "NodeIds"
	o = append(o, 0xa7, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NodeIds)))
	for za0001 := range z.NodeIds {
		o = msgp.AppendInt(o, z.NodeIds[za0001])
	}
	// string "GIDs"
	o = append(o, 0xa4, 0x47, 0x49, 0x44, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.GIDs)))
	for za0002 := range z.GIDs {
		o = msgp.AppendInt(o, z.GIDs[za0002])
	}
	// string "ShardIds"
	o = append(o, 0xa8, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ShardIds)))
	for za0003 := range z.ShardIds {
		o = msgp.AppendInt(o, z.ShardIds[za0003])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Nodes":
			z.Nodes, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
		case "Groups":
			z.Groups, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
		case "Shards":
			z.Shards, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
		case "NodeIds":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeIds")
				return
			}
			if cap(z.NodeIds) >= int(zb0002) {
				z.NodeIds = (z.NodeIds)[:zb0002]
			} else {
				z.NodeIds = make([]int, zb0002)
			}
			for za0001 := range z.NodeIds {
				z.NodeIds[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NodeIds", za0001)
					return
				}
			}
		case "GIDs":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GIDs")
				return
			}
			if cap(z.GIDs) >= int(zb0003) {
				z.GIDs = (z.GIDs)[:zb0003]
			} else {
				z.GIDs = make([]int, zb0003)
			}
			for za0002 := range z.GIDs {
				z.GIDs[za0002], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "GIDs", za0002)
					return
				}
			}
		case "ShardIds":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ShardIds")
				return
			}
			if cap(z.ShardIds) >= int(zb0004) {
				z.ShardIds = (z.ShardIds)[:zb0004]
			} else {
				z.ShardIds = make([]int, zb0004)
			}
			for za0003 := range z.ShardIds {
				z.ShardIds[za0003], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ShardIds", za0003)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShowArgs) Msgsize() (s int) {
	s = 1 + 6 + msgp.BoolSize + 7 + msgp.BoolSize + 7 + msgp.BoolSize + 8 + msgp.ArrayHeaderSize + (len(z.NodeIds) * (msgp.IntSize)) + 5 + msgp.ArrayHeaderSize + (len(z.GIDs) * (msgp.IntSize)) + 9 + msgp.ArrayHeaderSize + (len(z.ShardIds) * (msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShowGroupInfoByNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Addr":
			z.Addr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "Peer":
			z.Peer, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "IsLeader":
			z.IsLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "Status":
			z.Status, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "Size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShowGroupInfoByNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Id"
	err = en.Append(0x87, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Addr"
	err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Addr)
	if err != nil {
		err = msgp.WrapError(err, "Addr")
		return
	}
	// write "Peer"
	err = en.Append(0xa4, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Peer)
	if err != nil {
		err = msgp.WrapError(err, "Peer")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	// write "IsLeader"
	err = en.Append(0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsLeader)
	if err != nil {
		err = msgp.WrapError(err, "IsLeader")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShowGroupInfoByNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Id"
	o = append(o, 0x87, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "Addr"
	o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Addr)
	// string "Peer"
	o = append(o, 0xa4, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.Peer)
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	// string "IsLeader"
	o = append(o, 0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.IsLeader)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, z.Status)
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowGroupInfoByNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Addr":
			z.Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "Peer":
			z.Peer, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "IsLeader":
			z.IsLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "Status":
			z.Status, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShowGroupInfoByNode) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Addr) + 5 + msgp.IntSize + 8 + msgp.IntSize + 9 + msgp.BoolSize + 7 + msgp.StringPrefixSize + len(z.Status) + 5 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShowGroupRes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Found":
			z.Found, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Found")
				return
			}
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "ShardCnt":
			z.ShardCnt, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ShardCnt")
				return
			}
		case "ByNode":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ByNode")
				return
			}
			if cap(z.ByNode) >= int(zb0002) {
				z.ByNode = (z.ByNode)[:zb0002]
			} else {
				z.ByNode = make([]ShowGroupInfoByNode, zb0002)
			}
			for za0001 := range z.ByNode {
				err = z.ByNode[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ByNode", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShowGroupRes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Found"
	err = en.Append(0x84, 0xa5, 0x46, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Found)
	if err != nil {
		err = msgp.WrapError(err, "Found")
		return
	}
	// write "Id"
	err = en.Append(0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "ShardCnt"
	err = en.Append(0xa8, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ShardCnt)
	if err != nil {
		err = msgp.WrapError(err, "ShardCnt")
		return
	}
	// write "ByNode"
	err = en.Append(0xa6, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ByNode)))
	if err != nil {
		err = msgp.WrapError(err, "ByNode")
		return
	}
	for za0001 := range z.ByNode {
		err = z.ByNode[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ByNode", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShowGroupRes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Found"
	o = append(o, 0x84, 0xa5, 0x46, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendBool(o, z.Found)
	// string "Id"
	o = append(o, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "ShardCnt"
	o = append(o, 0xa8, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.ShardCnt)
	// string "ByNode"
	o = append(o, 0xa6, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ByNode)))
	for za0001 := range z.ByNode {
		o, err = z.ByNode[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ByNode", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowGroupRes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Found":
			z.Found, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Found")
				return
			}
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "ShardCnt":
			z.ShardCnt, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ShardCnt")
				return
			}
		case "ByNode":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ByNode")
				return
			}
			if cap(z.ByNode) >= int(zb0002) {
				z.ByNode = (z.ByNode)[:zb0002]
			} else {
				z.ByNode = make([]ShowGroupInfoByNode, zb0002)
			}
			for za0001 := range z.ByNode {
				bts, err = z.ByNode[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ByNode", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShowGroupRes) Msgsize() (s int) {
	s = 1 + 6 + msgp.BoolSize + 3 + msgp.IntSize + 9 + msgp.IntSize + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.ByNode {
		s += z.ByNode[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShowMasterArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Dummy":
			z.Dummy, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Dummy")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ShowMasterArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Dummy"
	err = en.Append(0x81, 0xa5, 0x44, 0x75, 0x6d, 0x6d, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Dummy)
	if err != nil {
		err = msgp.WrapError(err, "Dummy")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ShowMasterArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Dummy"
	o = append(o, 0x81, 0xa5, 0x44, 0x75, 0x6d, 0x6d, 0x79)
	o = msgp.AppendInt(o, z.Dummy)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowMasterArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Dummy":
			z.Dummy, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Dummy")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ShowMasterArgs) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShowMasterReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Addr":
			z.Addr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "IsLeader":
			z.IsLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "LatestConfNum":
			z.LatestConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LatestConfNum")
				return
			}
		case "Size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Status":
			z.Status, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "MetricAddr":
			z.MetricAddr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MetricAddr")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShowMasterReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Id"
	err = en.Append(0x87, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Addr"
	err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Addr)
	if err != nil {
		err = msgp.WrapError(err, "Addr")
		return
	}
	// write "IsLeader"
	err = en.Append(0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsLeader)
	if err != nil {
		err = msgp.WrapError(err, "IsLeader")
		return
	}
	// write "LatestConfNum"
	err = en.Append(0xad, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LatestConfNum)
	if err != nil {
		err = msgp.WrapError(err, "LatestConfNum")
		return
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "MetricAddr"
	err = en.Append(0xaa, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.MetricAddr)
	if err != nil {
		err = msgp.WrapError(err, "MetricAddr")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShowMasterReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Id"
	o = append(o, 0x87, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "Addr"
	o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Addr)
	// string "IsLeader"
	o = append(o, 0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.IsLeader)
	// string "LatestConfNum"
	o = append(o, 0xad, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.LatestConfNum)
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, z.Status)
	// string "MetricAddr"
	o = append(o, 0xaa, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.MetricAddr)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowMasterReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Addr":
			z.Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "IsLeader":
			z.IsLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "LatestConfNum":
			z.LatestConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LatestConfNum")
				return
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Status":
			z.Status, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "MetricAddr":
			z.MetricAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetricAddr")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShowMasterReply) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Addr) + 9 + msgp.BoolSize + 14 + msgp.IntSize + 5 + msgp.Int64Size + 7 + msgp.StringPrefixSize + len(z.Status) + 11 + msgp.StringPrefixSize + len(z.MetricAddr)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShowNodeRes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Found":
			z.Found, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Found")
				return
			}
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Addr":
			z.Addr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "Groups":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if cap(z.Groups) >= int(zb0002) {
				z.Groups = (z.Groups)[:zb0002]
			} else {
				z.Groups = make([]int, zb0002)
			}
			for za0001 := range z.Groups {
				z.Groups[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Groups", za0001)
					return
				}
			}
		case "IsLeader":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
			if z.IsLeader == nil {
				z.IsLeader = make(map[int]bool, zb0003)
			} else if len(z.IsLeader) > 0 {
				for key := range z.IsLeader {
					delete(z.IsLeader, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 int
				var za0003 bool
				za0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "IsLeader")
					return
				}
				za0003, err = dc.ReadBool()
				if err != nil {
					err = msgp.WrapError(err, "IsLeader", za0002)
					return
				}
				z.IsLeader[za0002] = za0003
			}
		case "Status":
			z.Status, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "MetricAddr":
			z.MetricAddr, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MetricAddr")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShowNodeRes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Found"
	err = en.Append(0x87, 0xa5, 0x46, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Found)
	if err != nil {
		err = msgp.WrapError(err, "Found")
		return
	}
	// write "Id"
	err = en.Append(0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Addr"
	err = en.Append(0xa4, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Addr)
	if err != nil {
		err = msgp.WrapError(err, "Addr")
		return
	}
	// write "Groups"
	err = en.Append(0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Groups)))
	if err != nil {
		err = msgp.WrapError(err, "Groups")
		return
	}
	for za0001 := range z.Groups {
		err = en.WriteInt(z.Groups[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Groups", za0001)
			return
		}
	}
	// write "IsLeader"
	err = en.Append(0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.IsLeader)))
	if err != nil {
		err = msgp.WrapError(err, "IsLeader")
		return
	}
	for za0002, za0003 := range z.IsLeader {
		err = en.WriteInt(za0002)
		if err != nil {
			err = msgp.WrapError(err, "IsLeader")
			return
		}
		err = en.WriteBool(za0003)
		if err != nil {
			err = msgp.WrapError(err, "IsLeader", za0002)
			return
		}
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "MetricAddr"
	err = en.Append(0xaa, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.MetricAddr)
	if err != nil {
		err = msgp.WrapError(err, "MetricAddr")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShowNodeRes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Found"
	o = append(o, 0x87, 0xa5, 0x46, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendBool(o, z.Found)
	// string "Id"
	o = append(o, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "Addr"
	o = append(o, 0xa4, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.Addr)
	// string "Groups"
	o = append(o, 0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Groups)))
	for za0001 := range z.Groups {
		o = msgp.AppendInt(o, z.Groups[za0001])
	}
	// string "IsLeader"
	o = append(o, 0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendMapHeader(o, uint32(len(z.IsLeader)))
	for za0002, za0003 := range z.IsLeader {
		o = msgp.AppendInt(o, za0002)
		o = msgp.AppendBool(o, za0003)
	}
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, z.Status)
	// string "MetricAddr"
	o = append(o, 0xaa, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72)
	o = msgp.AppendString(o, z.MetricAddr)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowNodeRes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Found":
			z.Found, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Found")
				return
			}
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Addr":
			z.Addr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Addr")
				return
			}
		case "Groups":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if cap(z.Groups) >= int(zb0002) {
				z.Groups = (z.Groups)[:zb0002]
			} else {
				z.Groups = make([]int, zb0002)
			}
			for za0001 := range z.Groups {
				z.Groups[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups", za0001)
					return
				}
			}
		case "IsLeader":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
			if z.IsLeader == nil {
				z.IsLeader = make(map[int]bool, zb0003)
			} else if len(z.IsLeader) > 0 {
				for key := range z.IsLeader {
					delete(z.IsLeader, key)
				}
			}
			for zb0003 > 0 {
				var za0002 int
				var za0003 bool
				zb0003--
				za0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "IsLeader")
					return
				}
				za0003, bts, err = msgp.ReadBoolBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "IsLeader", za0002)
					return
				}
				z.IsLeader[za0002] = za0003
			}
		case "Status":
			z.Status, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "MetricAddr":
			z.MetricAddr, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MetricAddr")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShowNodeRes) Msgsize() (s int) {
	s = 1 + 6 + msgp.BoolSize + 3 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Addr) + 7 + msgp.ArrayHeaderSize + (len(z.Groups) * (msgp.IntSize)) + 9 + msgp.MapHeaderSize
	if z.IsLeader != nil {
		for _, za0003 := range z.IsLeader {
			_ = za0003
			s += msgp.StringPrefixSize + msgp.IntSize + msgp.BoolSize
		}
	}
	s += 7 + msgp.StringPrefixSize + len(z.Status) + 11 + msgp.StringPrefixSize + len(z.MetricAddr)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShowReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "Nodes":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if cap(z.Nodes) >= int(zb0002) {
				z.Nodes = (z.Nodes)[:zb0002]
			} else {
				z.Nodes = make([]ShowNodeRes, zb0002)
			}
			for za0001 := range z.Nodes {
				err = z.Nodes[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
			}
		case "Groups":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if cap(z.Groups) >= int(zb0003) {
				z.Groups = (z.Groups)[:zb0003]
			} else {
				z.Groups = make([]ShowGroupRes, zb0003)
			}
			for za0002 := range z.Groups {
				err = z.Groups[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Groups", za0002)
					return
				}
			}
		case "Shards":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0004) {
				z.Shards = (z.Shards)[:zb0004]
			} else {
				z.Shards = make([]ShowShardRes, zb0004)
			}
			for za0003 := range z.Shards {
				err = z.Shards[za0003].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0003)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShowReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Err"
	err = en.Append(0x84, 0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// write "Nodes"
	err = en.Append(0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Nodes)))
	if err != nil {
		err = msgp.WrapError(err, "Nodes")
		return
	}
	for za0001 := range z.Nodes {
		err = z.Nodes[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Nodes", za0001)
			return
		}
	}
	// write "Groups"
	err = en.Append(0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Groups)))
	if err != nil {
		err = msgp.WrapError(err, "Groups")
		return
	}
	for za0002 := range z.Groups {
		err = z.Groups[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Groups", za0002)
			return
		}
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0003 := range z.Shards {
		err = z.Shards[za0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShowReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Err"
	o = append(o, 0x84, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	// string "Nodes"
	o = append(o, 0xa5, 0x4e, 0x6f, 0x64, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Nodes)))
	for za0001 := range z.Nodes {
		o, err = z.Nodes[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Nodes", za0001)
			return
		}
	}
	// string "Groups"
	o = append(o, 0xa6, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Groups)))
	for za0002 := range z.Groups {
		o, err = z.Groups[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Groups", za0002)
			return
		}
	}
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Shards)))
	for za0003 := range z.Shards {
		o, err = z.Shards[za0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "Nodes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nodes")
				return
			}
			if cap(z.Nodes) >= int(zb0002) {
				z.Nodes = (z.Nodes)[:zb0002]
			} else {
				z.Nodes = make([]ShowNodeRes, zb0002)
			}
			for za0001 := range z.Nodes {
				bts, err = z.Nodes[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nodes", za0001)
					return
				}
			}
		case "Groups":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Groups")
				return
			}
			if cap(z.Groups) >= int(zb0003) {
				z.Groups = (z.Groups)[:zb0003]
			} else {
				z.Groups = make([]ShowGroupRes, zb0003)
			}
			for za0002 := range z.Groups {
				bts, err = z.Groups[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Groups", za0002)
					return
				}
			}
		case "Shards":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0004) {
				z.Shards = (z.Shards)[:zb0004]
			} else {
				z.Shards = make([]ShowShardRes, zb0004)
			}
			for za0003 := range z.Shards {
				bts, err = z.Shards[za0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0003)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShowReply) Msgsize() (s int) {
	s = 1 + 4 + z.Err.Msgsize() + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Nodes {
		s += z.Nodes[za0001].Msgsize()
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0002 := range z.Groups {
		s += z.Groups[za0002].Msgsize()
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0003 := range z.Shards {
		s += z.Shards[za0003].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShowShardRes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Found":
			z.Found, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Found")
				return
			}
		case "Id":
			z.Id, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Gid":
			z.Gid, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = ShardStatus(zb0002)
			}
		case "Size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Capacity":
			z.Capacity, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Capacity")
				return
			}
		case "RangeStart":
			z.RangeStart, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RangeStart")
				return
			}
		case "RangeEnd":
			z.RangeEnd, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RangeEnd")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShowShardRes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "Found"
	err = en.Append(0x88, 0xa5, 0x46, 0x6f, 0x75, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Found)
	if err != nil {
		err = msgp.WrapError(err, "Found")
		return
	}
	// write "Id"
	err = en.Append(0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Gid"
	err = en.Append(0xa3, 0x47, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Gid)
	if err != nil {
		err = msgp.WrapError(err, "Gid")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "Size"
	err = en.Append(0xa4, 0x53, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "Capacity"
	err = en.Append(0xa8, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Capacity)
	if err != nil {
		err = msgp.WrapError(err, "Capacity")
		return
	}
	// write "RangeStart"
	err = en.Append(0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.RangeStart)
	if err != nil {
		err = msgp.WrapError(err, "RangeStart")
		return
	}
	// write "RangeEnd"
	err = en.Append(0xa8, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.RangeEnd)
	if err != nil {
		err = msgp.WrapError(err, "RangeEnd")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShowShardRes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "Found"
	o = append(o, 0x88, 0xa5, 0x46, 0x6f, 0x75, 0x6e, 0x64)
	o = msgp.AppendBool(o, z.Found)
	// string "Id"
	o = append(o, 0xa2, 0x49, 0x64)
	o = msgp.AppendInt(o, z.Id)
	// string "Gid"
	o = append(o, 0xa3, 0x47, 0x69, 0x64)
	o = msgp.AppendInt(o, z.Gid)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	// string "Size"
	o = append(o, 0xa4, 0x53, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Size)
	// string "Capacity"
	o = append(o, 0xa8, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79)
	o = msgp.AppendUint64(o, z.Capacity)
	// string "RangeStart"
	o = append(o, 0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendString(o, z.RangeStart)
	// string "RangeEnd"
	o = append(o, 0xa8, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64)
	o = msgp.AppendString(o, z.RangeEnd)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShowShardRes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Found":
			z.Found, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Found")
				return
			}
		case "Id":
			z.Id, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Gid":
			z.Gid, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "Status":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = ShardStatus(zb0002)
			}
		case "Size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "Capacity":
			z.Capacity, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Capacity")
				return
			}
		case "RangeStart":
			z.RangeStart, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RangeStart")
				return
			}
		case "RangeEnd":
			z.RangeEnd, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RangeEnd")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShowShardRes) Msgsize() (s int) {
	s = 1 + 6 + msgp.BoolSize + 3 + msgp.IntSize + 4 + msgp.IntSize + 7 + msgp.IntSize + 5 + msgp.Int64Size + 9 + msgp.Uint64Size + 11 + msgp.StringPrefixSize + len(z.RangeStart) + 9 + msgp.StringPrefixSize + len(z.RangeEnd)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransferLeaderArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Gid":
			z.Gid, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "Target":
			z.Target, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TransferLeaderArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Gid"
	err = en.Append(0x82, 0xa3, 0x47, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Gid)
	if err != nil {
		err = msgp.WrapError(err, "Gid")
		return
	}
	// write "Target"
	err = en.Append(0xa6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TransferLeaderArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Gid"
	o = append(o, 0x82, 0xa3, 0x47, 0x69, 0x64)
	o = msgp.AppendInt(o, z.Gid)
	// string "Target"
	o = append(o, 0xa6, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74)
	o = msgp.AppendInt(o, z.Target)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransferLeaderArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Gid":
			z.Gid, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "Target":
			z.Target, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TransferLeaderArgs) Msgsize() (s int) {
	s = 1 + 4 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransferLeaderReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransferLeaderReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Err"
	err = en.Append(0x81, 0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransferLeaderReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Err"
	o = append(o, 0x81, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransferLeaderReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransferLeaderReply) Msgsize() (s int) {
	s = 1 + 4 + z.Err.Msgsize()
	return
}
