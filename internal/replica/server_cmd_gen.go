package replica

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/Allen1211/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ApplyResBase) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ApplyResBase) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ApplyResBase) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ApplyResBase) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ApplyResBase) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CmdBase) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cid":
			z.Cid, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CmdBase) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Cid)
	if err != nil {
		err = msgp.WrapError(err, "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Seq)
	if err != nil {
		err = msgp.WrapError(err, "Seq")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CmdBase) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.Seq)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CmdBase) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Cid":
			z.Cid, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cid")
				return
			}
		case "Seq":
			z.Seq, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Seq")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CmdBase) Msgsize() (s int) {
	s = 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConfCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "Config":
			err = z.Config.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Config")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ConfCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CmdBase"
	err = en.Append(0x82, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Seq")
		return
	}
	// write "Config"
	err = en.Append(0xa6, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67)
	if err != nil {
		return
	}
	err = z.Config.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Config")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ConfCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CmdBase"
	o = append(o, 0x82, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CmdBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.CmdBase.Seq)
	// string "Config"
	o = append(o, 0xa6, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67)
	o, err = z.Config.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Config")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConfCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "Config":
			bts, err = z.Config.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Config")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ConfCmd) Msgsize() (s int) {
	s = 1 + 8 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 7 + z.Config.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EmptyCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EmptyCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "CmdBase"
	err = en.Append(0x81, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Seq")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EmptyCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "CmdBase"
	o = append(o, 0x81, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CmdBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.CmdBase.Seq)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EmptyCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EmptyCmd) Msgsize() (s int) {
	s = 1 + 8 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EraseShardCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Shards":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0003) {
				z.Shards = (z.Shards)[:zb0003]
			} else {
				z.Shards = make([]int, zb0003)
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EraseShardCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "CmdBase"
	err = en.Append(0x83, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Seq")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001 := range z.Shards {
		err = en.WriteInt(z.Shards[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EraseShardCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "CmdBase"
	o = append(o, 0x83, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CmdBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.CmdBase.Seq)
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Shards)))
	for za0001 := range z.Shards {
		o = msgp.AppendInt(o, z.Shards[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EraseShardCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Shards":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0003) {
				z.Shards = (z.Shards)[:zb0003]
			} else {
				z.Shards = make([]int, zb0003)
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EraseShardCmd) Msgsize() (s int) {
	s = 1 + 8 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 8 + msgp.IntSize + 7 + msgp.ArrayHeaderSize + (len(z.Shards) * (msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EraseShardCmdApplyRes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ApplyResBase":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ApplyResBase")
					return
				}
				z.ApplyResBase = nil
			} else {
				if z.ApplyResBase == nil {
					z.ApplyResBase = new(ApplyResBase)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ApplyResBase")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ApplyResBase")
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ApplyResBase")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EraseShardCmdApplyRes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ApplyResBase"
	err = en.Append(0x81, 0xac, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.ApplyResBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 0
		err = en.Append(0x80)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EraseShardCmdApplyRes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ApplyResBase"
	o = append(o, 0x81, 0xac, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x42, 0x61, 0x73, 0x65)
	if z.ApplyResBase == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 0
		o = append(o, 0x80)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EraseShardCmdApplyRes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ApplyResBase":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ApplyResBase = nil
			} else {
				if z.ApplyResBase == nil {
					z.ApplyResBase = new(ApplyResBase)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplyResBase")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplyResBase")
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ApplyResBase")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EraseShardCmdApplyRes) Msgsize() (s int) {
	s = 1 + 13
	if z.ApplyResBase == nil {
		s += msgp.NilSize
	} else {
		s += 1
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *InstallShardCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Shards":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if z.Shards == nil {
				z.Shards = make(map[int][]byte, zb0003)
			} else if len(z.Shards) > 0 {
				for key := range z.Shards {
					delete(z.Shards, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 int
				var za0002 []byte
				za0001, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
				z.Shards[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *InstallShardCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "CmdBase"
	err = en.Append(0x83, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Seq")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001, za0002 := range z.Shards {
		err = en.WriteInt(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Shards")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *InstallShardCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "CmdBase"
	o = append(o, 0x83, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CmdBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.CmdBase.Seq)
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Shards)))
	for za0001, za0002 := range z.Shards {
		o = msgp.AppendInt(o, za0001)
		o = msgp.AppendBytes(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InstallShardCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Shards":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if z.Shards == nil {
				z.Shards = make(map[int][]byte, zb0003)
			} else if len(z.Shards) > 0 {
				for key := range z.Shards {
					delete(z.Shards, key)
				}
			}
			for zb0003 > 0 {
				var za0001 int
				var za0002 []byte
				zb0003--
				za0001, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
				z.Shards[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *InstallShardCmd) Msgsize() (s int) {
	s = 1 + 8 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 8 + msgp.IntSize + 7 + msgp.MapHeaderSize
	if z.Shards != nil {
		for _, za0002 := range z.Shards {
			_ = za0002
			s += msgp.StringPrefixSize + msgp.IntSize + msgp.BytesPrefixSize + len(za0002)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *KVCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "Op":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Op")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Op")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.Op.Type, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Op", "Type")
						return
					}
				case "Key":
					z.Op.Key, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Op", "Key")
						return
					}
				case "Value":
					z.Op.Value, err = dc.ReadBytes(z.Op.Value)
					if err != nil {
						err = msgp.WrapError(err, "Op", "Value")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Op")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *KVCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CmdBase"
	err = en.Append(0x82, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Seq")
		return
	}
	// write "Op"
	err = en.Append(0xa2, 0x4f, 0x70)
	if err != nil {
		return
	}
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Op.Type)
	if err != nil {
		err = msgp.WrapError(err, "Op", "Type")
		return
	}
	// write "Key"
	err = en.Append(0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Op.Key)
	if err != nil {
		err = msgp.WrapError(err, "Op", "Key")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Op.Value)
	if err != nil {
		err = msgp.WrapError(err, "Op", "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *KVCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CmdBase"
	o = append(o, 0x82, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CmdBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.CmdBase.Seq)
	// string "Op"
	o = append(o, 0xa2, 0x4f, 0x70)
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Op.Type)
	// string "Key"
	o = append(o, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Op.Key)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Op.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KVCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "Op":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Op")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Op")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Type":
					z.Op.Type, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Op", "Type")
						return
					}
				case "Key":
					z.Op.Key, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Op", "Key")
						return
					}
				case "Value":
					z.Op.Value, bts, err = msgp.ReadBytesBytes(bts, z.Op.Value)
					if err != nil {
						err = msgp.WrapError(err, "Op", "Value")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Op")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KVCmd) Msgsize() (s int) {
	s = 1 + 8 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 3 + 1 + 5 + msgp.StringPrefixSize + len(z.Op.Type) + 4 + msgp.StringPrefixSize + len(z.Op.Key) + 6 + msgp.BytesPrefixSize + len(z.Op.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *KVCmdApplyRes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ApplyResBase":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ApplyResBase")
					return
				}
				z.ApplyResBase = nil
			} else {
				if z.ApplyResBase == nil {
					z.ApplyResBase = new(ApplyResBase)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ApplyResBase")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ApplyResBase")
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ApplyResBase")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *KVCmdApplyRes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "ApplyResBase"
	err = en.Append(0x81, 0xac, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.ApplyResBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 0
		err = en.Append(0x80)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *KVCmdApplyRes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "ApplyResBase"
	o = append(o, 0x81, 0xac, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x42, 0x61, 0x73, 0x65)
	if z.ApplyResBase == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 0
		o = append(o, 0x80)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KVCmdApplyRes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ApplyResBase":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ApplyResBase = nil
			} else {
				if z.ApplyResBase == nil {
					z.ApplyResBase = new(ApplyResBase)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ApplyResBase")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ApplyResBase")
						return
					}
					switch msgp.UnsafeString(field) {
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ApplyResBase")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KVCmdApplyRes) Msgsize() (s int) {
	s = 1 + 13
	if z.ApplyResBase == nil {
		s += msgp.NilSize
	} else {
		s += 1
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Op) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Op) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Type"
	err = en.Append(0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Key"
	err = en.Append(0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "Value"
	err = en.Append(0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Op) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Type"
	o = append(o, 0x83, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "Key"
	o = append(o, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	// string "Value"
	o = append(o, 0xa5, 0x56, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Op) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "Value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Op) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Type) + 4 + msgp.StringPrefixSize + len(z.Key) + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SnapshotCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "SnapInfo":
			err = z.SnapInfo.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "SnapInfo")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SnapshotCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CmdBase"
	err = en.Append(0x82, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Seq")
		return
	}
	// write "SnapInfo"
	err = en.Append(0xa8, 0x53, 0x6e, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f)
	if err != nil {
		return
	}
	err = z.SnapInfo.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "SnapInfo")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SnapshotCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CmdBase"
	o = append(o, 0x82, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CmdBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.CmdBase.Seq)
	// string "SnapInfo"
	o = append(o, 0xa8, 0x53, 0x6e, 0x61, 0x70, 0x49, 0x6e, 0x66, 0x6f)
	o, err = z.SnapInfo.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SnapInfo")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SnapshotCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "SnapInfo":
			bts, err = z.SnapInfo.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SnapInfo")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SnapshotCmd) Msgsize() (s int) {
	s = 1 + 8 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 9 + z.SnapInfo.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StopWaitingShardCmd) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "ConfNum":
			z.ConfNum, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Shards":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0003) {
				z.Shards = (z.Shards)[:zb0003]
			} else {
				z.Shards = make([]int, zb0003)
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StopWaitingShardCmd) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "CmdBase"
	err = en.Append(0x83, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Cid"
	err = en.Append(0x82, 0xa3, 0x43, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Cid)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Cid")
		return
	}
	// write "Seq"
	err = en.Append(0xa3, 0x53, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CmdBase.Seq)
	if err != nil {
		err = msgp.WrapError(err, "CmdBase", "Seq")
		return
	}
	// write "ConfNum"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ConfNum)
	if err != nil {
		err = msgp.WrapError(err, "ConfNum")
		return
	}
	// write "Shards"
	err = en.Append(0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001 := range z.Shards {
		err = en.WriteInt(z.Shards[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Shards", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StopWaitingShardCmd) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "CmdBase"
	o = append(o, 0x83, 0xa7, 0x43, 0x6d, 0x64, 0x42, 0x61, 0x73, 0x65)
	// map header, size 2
	// string "Cid"
	o = append(o, 0x82, 0xa3, 0x43, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.CmdBase.Cid)
	// string "Seq"
	o = append(o, 0xa3, 0x53, 0x65, 0x71)
	o = msgp.AppendInt64(o, z.CmdBase.Seq)
	// string "ConfNum"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x66, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt(o, z.ConfNum)
	// string "Shards"
	o = append(o, 0xa6, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Shards)))
	for za0001 := range z.Shards {
		o = msgp.AppendInt(o, z.Shards[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StopWaitingShardCmd) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CmdBase":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CmdBase")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "CmdBase")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Cid":
					z.CmdBase.Cid, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Cid")
						return
					}
				case "Seq":
					z.CmdBase.Seq, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase", "Seq")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "CmdBase")
						return
					}
				}
			}
		case "ConfNum":
			z.ConfNum, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfNum")
				return
			}
		case "Shards":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0003) {
				z.Shards = (z.Shards)[:zb0003]
			} else {
				z.Shards = make([]int, zb0003)
			}
			for za0001 := range z.Shards {
				z.Shards[za0001], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shards", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StopWaitingShardCmd) Msgsize() (s int) {
	s = 1 + 8 + 1 + 4 + msgp.Int64Size + 4 + msgp.Int64Size + 8 + msgp.IntSize + 7 + msgp.ArrayHeaderSize + (len(z.Shards) * (msgp.IntSize))
	return
}
