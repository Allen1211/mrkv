package raft

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/Allen1211/msgp/msgp"

	netw2 "github.com/allen1211/mrkv/internal/netw"
)

// DecodeMsg implements msgp.Decodable
func (z *AppendEntriesArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				err = z.RPCArgBase.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "LeaderId":
			z.LeaderId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LeaderId")
				return
			}
		case "PrevLogIdx":
			z.PrevLogIdx, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PrevLogIdx")
				return
			}
		case "PrevLogTerm":
			z.PrevLogTerm, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PrevLogTerm")
				return
			}
		case "Entries":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Entries")
				return
			}
			if cap(z.Entries) >= int(zb0002) {
				z.Entries = (z.Entries)[:zb0002]
			} else {
				z.Entries = make([]LogEntry, zb0002)
			}
			for za0001 := range z.Entries {
				err = z.Entries[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Entries", za0001)
					return
				}
			}
		case "LeaderCommit":
			z.LeaderCommit, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LeaderCommit")
				return
			}
		case "Start":
			z.Start, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AppendEntriesArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "RPCArgBase"
	err = en.Append(0x88, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.RPCArgBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RPCArgBase.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// write "Term"
	err = en.Append(0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "LeaderId"
	err = en.Append(0xa8, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LeaderId)
	if err != nil {
		err = msgp.WrapError(err, "LeaderId")
		return
	}
	// write "PrevLogIdx"
	err = en.Append(0xaa, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PrevLogIdx)
	if err != nil {
		err = msgp.WrapError(err, "PrevLogIdx")
		return
	}
	// write "PrevLogTerm"
	err = en.Append(0xab, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PrevLogTerm)
	if err != nil {
		err = msgp.WrapError(err, "PrevLogTerm")
		return
	}
	// write "Entries"
	err = en.Append(0xa7, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Entries)))
	if err != nil {
		err = msgp.WrapError(err, "Entries")
		return
	}
	for za0001 := range z.Entries {
		err = z.Entries[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Entries", za0001)
			return
		}
	}
	// write "LeaderCommit"
	err = en.Append(0xac, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LeaderCommit)
	if err != nil {
		err = msgp.WrapError(err, "LeaderCommit")
		return
	}
	// write "Start"
	err = en.Append(0xa5, 0x53, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AppendEntriesArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "RPCArgBase"
	o = append(o, 0x88, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if z.RPCArgBase == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RPCArgBase.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// string "Term"
	o = append(o, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	// string "LeaderId"
	o = append(o, 0xa8, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64)
	o = msgp.AppendInt(o, z.LeaderId)
	// string "PrevLogIdx"
	o = append(o, 0xaa, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x78)
	o = msgp.AppendInt(o, z.PrevLogIdx)
	// string "PrevLogTerm"
	o = append(o, 0xab, 0x50, 0x72, 0x65, 0x76, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.PrevLogTerm)
	// string "Entries"
	o = append(o, 0xa7, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Entries)))
	for za0001 := range z.Entries {
		o, err = z.Entries[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Entries", za0001)
			return
		}
	}
	// string "LeaderCommit"
	o = append(o, 0xac, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74)
	o = msgp.AppendInt(o, z.LeaderCommit)
	// string "Start"
	o = append(o, 0xa5, 0x53, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendInt64(o, z.Start)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppendEntriesArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				bts, err = z.RPCArgBase.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "LeaderId":
			z.LeaderId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LeaderId")
				return
			}
		case "PrevLogIdx":
			z.PrevLogIdx, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevLogIdx")
				return
			}
		case "PrevLogTerm":
			z.PrevLogTerm, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevLogTerm")
				return
			}
		case "Entries":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Entries")
				return
			}
			if cap(z.Entries) >= int(zb0002) {
				z.Entries = (z.Entries)[:zb0002]
			} else {
				z.Entries = make([]LogEntry, zb0002)
			}
			for za0001 := range z.Entries {
				bts, err = z.Entries[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Entries", za0001)
					return
				}
			}
		case "LeaderCommit":
			z.LeaderCommit, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LeaderCommit")
				return
			}
		case "Start":
			z.Start, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppendEntriesArgs) Msgsize() (s int) {
	s = 1 + 11
	if z.RPCArgBase == nil {
		s += msgp.NilSize
	} else {
		s += z.RPCArgBase.Msgsize()
	}
	s += 5 + msgp.IntSize + 9 + msgp.IntSize + 11 + msgp.IntSize + 12 + msgp.IntSize + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Entries {
		s += z.Entries[za0001].Msgsize()
	}
	s += 13 + msgp.IntSize + 6 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AppendEntriesReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "Success":
			z.Success, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		case "XTerm":
			z.XTerm, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "XTerm")
				return
			}
		case "XIndex":
			z.XIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "XIndex")
				return
			}
		case "XLen":
			z.XLen, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "XLen")
				return
			}
		case "Ts":
			z.Ts, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Ts")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AppendEntriesReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Term"
	err = en.Append(0x86, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "Success"
	err = en.Append(0xa7, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Success)
	if err != nil {
		err = msgp.WrapError(err, "Success")
		return
	}
	// write "XTerm"
	err = en.Append(0xa5, 0x58, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.XTerm)
	if err != nil {
		err = msgp.WrapError(err, "XTerm")
		return
	}
	// write "XIndex"
	err = en.Append(0xa6, 0x58, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.XIndex)
	if err != nil {
		err = msgp.WrapError(err, "XIndex")
		return
	}
	// write "XLen"
	err = en.Append(0xa4, 0x58, 0x4c, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.XLen)
	if err != nil {
		err = msgp.WrapError(err, "XLen")
		return
	}
	// write "Ts"
	err = en.Append(0xa2, 0x54, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Ts)
	if err != nil {
		err = msgp.WrapError(err, "Ts")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AppendEntriesReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Term"
	o = append(o, 0x86, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	// string "Success"
	o = append(o, 0xa7, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	o = msgp.AppendBool(o, z.Success)
	// string "XTerm"
	o = append(o, 0xa5, 0x58, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.XTerm)
	// string "XIndex"
	o = append(o, 0xa6, 0x58, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendInt(o, z.XIndex)
	// string "XLen"
	o = append(o, 0xa4, 0x58, 0x4c, 0x65, 0x6e)
	o = msgp.AppendInt(o, z.XLen)
	// string "Ts"
	o = append(o, 0xa2, 0x54, 0x73)
	o = msgp.AppendInt64(o, z.Ts)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AppendEntriesReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "Success":
			z.Success, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		case "XTerm":
			z.XTerm, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "XTerm")
				return
			}
		case "XIndex":
			z.XIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "XIndex")
				return
			}
		case "XLen":
			z.XLen, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "XLen")
				return
			}
		case "Ts":
			z.Ts, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ts")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AppendEntriesReply) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 8 + msgp.BoolSize + 6 + msgp.IntSize + 7 + msgp.IntSize + 5 + msgp.IntSize + 3 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *InstallSnapshotArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				err = z.RPCArgBase.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "LeaderId":
			z.LeaderId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LeaderId")
				return
			}
		case "LastIncludedIdx":
			z.LastIncludedIdx, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedIdx")
				return
			}
		case "LastIncludedTerm":
			z.LastIncludedTerm, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedTerm")
				return
			}
		case "LastIncludedEndLSN":
			z.LastIncludedEndLSN, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedEndLSN")
				return
			}
		case "Data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *InstallSnapshotArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "RPCArgBase"
	err = en.Append(0x87, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.RPCArgBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RPCArgBase.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// write "Term"
	err = en.Append(0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "LeaderId"
	err = en.Append(0xa8, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LeaderId)
	if err != nil {
		err = msgp.WrapError(err, "LeaderId")
		return
	}
	// write "LastIncludedIdx"
	err = en.Append(0xaf, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x64, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LastIncludedIdx)
	if err != nil {
		err = msgp.WrapError(err, "LastIncludedIdx")
		return
	}
	// write "LastIncludedTerm"
	err = en.Append(0xb0, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LastIncludedTerm)
	if err != nil {
		err = msgp.WrapError(err, "LastIncludedTerm")
		return
	}
	// write "LastIncludedEndLSN"
	err = en.Append(0xb2, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x4c, 0x53, 0x4e)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.LastIncludedEndLSN)
	if err != nil {
		err = msgp.WrapError(err, "LastIncludedEndLSN")
		return
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *InstallSnapshotArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "RPCArgBase"
	o = append(o, 0x87, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if z.RPCArgBase == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RPCArgBase.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// string "Term"
	o = append(o, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	// string "LeaderId"
	o = append(o, 0xa8, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64)
	o = msgp.AppendInt(o, z.LeaderId)
	// string "LastIncludedIdx"
	o = append(o, 0xaf, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x64, 0x78)
	o = msgp.AppendInt(o, z.LastIncludedIdx)
	// string "LastIncludedTerm"
	o = append(o, 0xb0, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.LastIncludedTerm)
	// string "LastIncludedEndLSN"
	o = append(o, 0xb2, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x4c, 0x53, 0x4e)
	o = msgp.AppendUint64(o, z.LastIncludedEndLSN)
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InstallSnapshotArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				bts, err = z.RPCArgBase.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "LeaderId":
			z.LeaderId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LeaderId")
				return
			}
		case "LastIncludedIdx":
			z.LastIncludedIdx, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedIdx")
				return
			}
		case "LastIncludedTerm":
			z.LastIncludedTerm, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedTerm")
				return
			}
		case "LastIncludedEndLSN":
			z.LastIncludedEndLSN, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastIncludedEndLSN")
				return
			}
		case "Data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *InstallSnapshotArgs) Msgsize() (s int) {
	s = 1 + 11
	if z.RPCArgBase == nil {
		s += msgp.NilSize
	} else {
		s += z.RPCArgBase.Msgsize()
	}
	s += 5 + msgp.IntSize + 9 + msgp.IntSize + 16 + msgp.IntSize + 17 + msgp.IntSize + 19 + msgp.Uint64Size + 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *InstallSnapshotReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z InstallSnapshotReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Term"
	err = en.Append(0x81, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z InstallSnapshotReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Term"
	o = append(o, 0x81, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InstallSnapshotReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z InstallSnapshotReply) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReadIndexFromFollowerArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				err = z.RPCArgBase.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ReadIndexFromFollowerArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "RPCArgBase"
	err = en.Append(0x82, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.RPCArgBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RPCArgBase.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// write "Term"
	err = en.Append(0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ReadIndexFromFollowerArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "RPCArgBase"
	o = append(o, 0x82, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if z.RPCArgBase == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RPCArgBase.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// string "Term"
	o = append(o, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReadIndexFromFollowerArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				bts, err = z.RPCArgBase.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ReadIndexFromFollowerArgs) Msgsize() (s int) {
	s = 1 + 11
	if z.RPCArgBase == nil {
		s += msgp.NilSize
	} else {
		s += z.RPCArgBase.Msgsize()
	}
	s += 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReadIndexFromFollowerReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "IsLeader":
			z.IsLeader, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "Success":
			z.Success, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		case "ReadIdx":
			z.ReadIdx, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ReadIdx")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ReadIndexFromFollowerReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Term"
	err = en.Append(0x84, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "IsLeader"
	err = en.Append(0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsLeader)
	if err != nil {
		err = msgp.WrapError(err, "IsLeader")
		return
	}
	// write "Success"
	err = en.Append(0xa7, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Success)
	if err != nil {
		err = msgp.WrapError(err, "Success")
		return
	}
	// write "ReadIdx"
	err = en.Append(0xa7, 0x52, 0x65, 0x61, 0x64, 0x49, 0x64, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ReadIdx)
	if err != nil {
		err = msgp.WrapError(err, "ReadIdx")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ReadIndexFromFollowerReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Term"
	o = append(o, 0x84, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	// string "IsLeader"
	o = append(o, 0xa8, 0x49, 0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72)
	o = msgp.AppendBool(o, z.IsLeader)
	// string "Success"
	o = append(o, 0xa7, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	o = msgp.AppendBool(o, z.Success)
	// string "ReadIdx"
	o = append(o, 0xa7, 0x52, 0x65, 0x61, 0x64, 0x49, 0x64, 0x78)
	o = msgp.AppendInt(o, z.ReadIdx)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReadIndexFromFollowerReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "IsLeader":
			z.IsLeader, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsLeader")
				return
			}
		case "Success":
			z.Success, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		case "ReadIdx":
			z.ReadIdx, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReadIdx")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ReadIndexFromFollowerReply) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 9 + msgp.BoolSize + 8 + msgp.BoolSize + 8 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RequestVoteArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				err = z.RPCArgBase.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "CandidateId":
			z.CandidateId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "CandidateId")
				return
			}
		case "LastLogIdx":
			z.LastLogIdx, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LastLogIdx")
				return
			}
		case "LastLogTerm":
			z.LastLogTerm, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LastLogTerm")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RequestVoteArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "RPCArgBase"
	err = en.Append(0x85, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.RPCArgBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RPCArgBase.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// write "Term"
	err = en.Append(0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "CandidateId"
	err = en.Append(0xab, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.CandidateId)
	if err != nil {
		err = msgp.WrapError(err, "CandidateId")
		return
	}
	// write "LastLogIdx"
	err = en.Append(0xaa, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LastLogIdx)
	if err != nil {
		err = msgp.WrapError(err, "LastLogIdx")
		return
	}
	// write "LastLogTerm"
	err = en.Append(0xab, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LastLogTerm)
	if err != nil {
		err = msgp.WrapError(err, "LastLogTerm")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RequestVoteArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "RPCArgBase"
	o = append(o, 0x85, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if z.RPCArgBase == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RPCArgBase.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// string "Term"
	o = append(o, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	// string "CandidateId"
	o = append(o, 0xab, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.CandidateId)
	// string "LastLogIdx"
	o = append(o, 0xaa, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x78)
	o = msgp.AppendInt(o, z.LastLogIdx)
	// string "LastLogTerm"
	o = append(o, 0xab, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.LastLogTerm)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RequestVoteArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				bts, err = z.RPCArgBase.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "CandidateId":
			z.CandidateId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CandidateId")
				return
			}
		case "LastLogIdx":
			z.LastLogIdx, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastLogIdx")
				return
			}
		case "LastLogTerm":
			z.LastLogTerm, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastLogTerm")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RequestVoteArgs) Msgsize() (s int) {
	s = 1 + 11
	if z.RPCArgBase == nil {
		s += msgp.NilSize
	} else {
		s += z.RPCArgBase.Msgsize()
	}
	s += 5 + msgp.IntSize + 12 + msgp.IntSize + 11 + msgp.IntSize + 12 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RequestVoteReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "VoteGranted":
			z.VoteGranted, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "VoteGranted")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RequestVoteReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Term"
	err = en.Append(0x82, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "VoteGranted"
	err = en.Append(0xab, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.VoteGranted)
	if err != nil {
		err = msgp.WrapError(err, "VoteGranted")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RequestVoteReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Term"
	o = append(o, 0x82, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	// string "VoteGranted"
	o = append(o, 0xab, 0x56, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64)
	o = msgp.AppendBool(o, z.VoteGranted)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RequestVoteReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "VoteGranted":
			z.VoteGranted, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VoteGranted")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RequestVoteReply) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 12 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TimeoutNowArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				err = z.RPCArgBase.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TimeoutNowArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "RPCArgBase"
	err = en.Append(0x82, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.RPCArgBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RPCArgBase.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// write "Term"
	err = en.Append(0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TimeoutNowArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "RPCArgBase"
	o = append(o, 0x82, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if z.RPCArgBase == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RPCArgBase.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// string "Term"
	o = append(o, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TimeoutNowArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				bts, err = z.RPCArgBase.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TimeoutNowArgs) Msgsize() (s int) {
	s = 1 + 11
	if z.RPCArgBase == nil {
		s += msgp.NilSize
	} else {
		s += z.RPCArgBase.Msgsize()
	}
	s += 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TimeoutNowReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "Success":
			z.Success, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TimeoutNowReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Term"
	err = en.Append(0x82, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Term)
	if err != nil {
		err = msgp.WrapError(err, "Term")
		return
	}
	// write "Success"
	err = en.Append(0xa7, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Success)
	if err != nil {
		err = msgp.WrapError(err, "Success")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TimeoutNowReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Term"
	o = append(o, 0x82, 0xa4, 0x54, 0x65, 0x72, 0x6d)
	o = msgp.AppendInt(o, z.Term)
	// string "Success"
	o = append(o, 0xa7, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73)
	o = msgp.AppendBool(o, z.Success)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TimeoutNowReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Term":
			z.Term, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Term")
				return
			}
		case "Success":
			z.Success, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Success")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TimeoutNowReply) Msgsize() (s int) {
	s = 1 + 5 + msgp.IntSize + 8 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransferLeaderArgs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				err = z.RPCArgBase.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Gid":
			z.Gid, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "NodeId":
			z.NodeId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "Peer":
			z.Peer, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransferLeaderArgs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "RPCArgBase"
	err = en.Append(0x84, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	if z.RPCArgBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RPCArgBase.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// write "Gid"
	err = en.Append(0xa3, 0x47, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Gid)
	if err != nil {
		err = msgp.WrapError(err, "Gid")
		return
	}
	// write "NodeId"
	err = en.Append(0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "NodeId")
		return
	}
	// write "Peer"
	err = en.Append(0xa4, 0x50, 0x65, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Peer)
	if err != nil {
		err = msgp.WrapError(err, "Peer")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransferLeaderArgs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "RPCArgBase"
	o = append(o, 0x84, 0xaa, 0x52, 0x50, 0x43, 0x41, 0x72, 0x67, 0x42, 0x61, 0x73, 0x65)
	if z.RPCArgBase == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.RPCArgBase.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "RPCArgBase")
			return
		}
	}
	// string "Gid"
	o = append(o, 0xa3, 0x47, 0x69, 0x64)
	o = msgp.AppendInt(o, z.Gid)
	// string "NodeId"
	o = append(o, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendInt(o, z.NodeId)
	// string "Peer"
	o = append(o, 0xa4, 0x50, 0x65, 0x65, 0x72)
	o = msgp.AppendInt(o, z.Peer)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransferLeaderArgs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RPCArgBase":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.RPCArgBase = nil
			} else {
				if z.RPCArgBase == nil {
					z.RPCArgBase = new(netw2.RPCArgBase)
				}
				bts, err = z.RPCArgBase.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "RPCArgBase")
					return
				}
			}
		case "Gid":
			z.Gid, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gid")
				return
			}
		case "NodeId":
			z.NodeId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "Peer":
			z.Peer, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Peer")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransferLeaderArgs) Msgsize() (s int) {
	s = 1 + 11
	if z.RPCArgBase == nil {
		s += msgp.NilSize
	} else {
		s += z.RPCArgBase.Msgsize()
	}
	s += 4 + msgp.IntSize + 7 + msgp.IntSize + 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransferLeaderReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TransferLeaderReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Err"
	err = en.Append(0x81, 0xa3, 0x45, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TransferLeaderReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Err"
	o = append(o, 0x81, 0xa3, 0x45, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransferLeaderReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TransferLeaderReply) Msgsize() (s int) {
	s = 1 + 4 + z.Err.Msgsize()
	return
}
